{"version":3,"sources":["utils/setAuthToken.js","redux/actions/authActions.js","redux/actions/types.js","redux/actions/teamActions.js","components/modals/SettingsModal.js","components/home/Home.js","components/tags/AddTag.js","redux/actions/noteActions.js","components/notes/EditNote.js","components/notes/NotesList.js","components/notes/NoteView.js","components/notes/AllNotes.js","components/notes/TagNoteList.js","components/chat/Chat.js","components/auth/Login.js","components/auth/Register.js","components/teams/CreateTeam.js","components/modals/JoinTeamModal.js","components/teams/TeamSearch.js","components/teams/EditTeam.js","components/notes/HomeNotesList.js","components/todos/HomeTodoList.js","components/events/HomeEventsList.js","components/modals/MembersModal.js","components/modals/TeamSettingsModal.js","components/teams/TeamHeader.js","components/teams/SearchResults.js","components/teams/Team.js","components/todos/AddTodo.js","components/events/AddEvent.js","redux/actions/eventActions.js","components/private-route/PrivateRoute.js","components/events/EventList.js","components/events/EditEvent.js","components/todos/EditTodo.js","components/chat/Message.js","components/chat/Messages.js","components/tags/Tags.js","redux/actions/tagActions.js","redux/reducers/authReducers.js","redux/reducers/errorReducers.js","redux/reducers/teamReducer.js","redux/reducers/noteReducer.js","redux/reducers/eventReducer.js","redux/reducers/tagReducers.js","redux/reducers/index.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decodedToken","type","payload","logoutUser","dispatch","localStorage","removeItem","joinTeam","userData","teamData","joinData","post","then","res","alert","data","catch","err","console","log","getTeamWithId","id","get","completeTeamTodo","todoData","deleteTeamTodo","SettingsModal","setWrapperRef","bind","handleOutsideClick","document","addEventListener","this","removeEventListener","handleClickOutside","node","wrapperRef","evt","props","showModal","handleClose","contains","target","handleLogout","children","showModalClass","body","style","overflow","className","ref","Card","length","map","child","onClick","React","Component","Home","setState","hideModal","state","teams","currTeam","settings","onLogoutClick","isUserInTeam","userId","auth","user","team","teamMembers","isInTeam","i","_id","preventDefault","window","location","reload","teamsList","usersTeams","to","pathname","teamId","teamName","fontSize","firstName","connect","AddTag","tags","addTag","deleteTag","tagDropdownItems","teamTags","tag","value","title","key","backgroundColor","color","deleteNote","noteData","deleted","EditNote","selectTag","selectedTag","innerText","prevState","splice","getElementById","selTag","concat","pinned","fromChat","onChange","onSubmit","onDeleteNote","currNote","noteTitle","noteBody","nextProps","noteId","author","lastName","Object","entries","addNoteToTeam","updateNote","name","Grid","container","spacing","item","xs","autoComplete","placeholder","rows","res1","res2","NotesList","onContextItemClick","prevProps","note","lastAddedNote","match","params","notesList","teamNotes","pinnedNotesCompon","lastUpdated","Date","updatedAt","toLocaleString","slice","unpinnedNotesCompon","history","push","NoteView","setCurrNote","modalStyles","content","top","left","right","bottom","marginRight","transform","ReactModal","setAppElement","AllNotes","newCurr","modalOpen","teamid","isOpen","onRequestClose","goBack","socket","TagNoteList","findNotesWithTag","notes","tagid","notesWithTag","j","toString","display","flexWrap","Login","username","password","errors","isAuthenticated","error","changed","loginUser","setItem","jwt_decode","response","Register","email","newUser","registerUser","withRouter","CreateTeam","teamDescription","currErrors","possibErrors","currUser","isAdmin","trim","createTeam","JoinTeamModal","inputtedNum","attemptJoin","secretNum","TeamSearch","prompt","hasSearched","searchForTeamWithPrompt","searchPrompt","searchTeamWithPrompt","matchedTeams","matchedTeamsList","matchedTeam","toLowerCase","EditTeam","updated","onEditTeam","setAdmin","members","numAdmin","editTeam","member","tempMembers","md","sm","HomeNotesList","onContextMenu","rightClickNote","HomeTodoList","onToggle","currTodo","teamTodos","todo","Form","Check","custom","label","todoText","checked","isCompleted","assignee","HomeEventsList","eventsList","sort","a","b","eventStartTime","eventData","deleteEvent","numPastEvents","sortedEvents","teamEvents","sortFutureEvents","event","start","end","eventEndTime","eventTitle","eventDescription","eventLocation","MembersModal","memberContext","TeamSettingsModal","secretNumText","text","TeamHeader","showMembersModal","showTeamSettingsModal","hideMembersModal","hideTeamSettingsModal","teamSettings","findIfAdmin","teamDropdownItems","Dropdown","Item","Toggle","variant","Menu","SearchResults","search","includes","findTodosWithTag","todosList","todosWithTag","searchedNotesComponent","searchedTodosComponent","Team","getAllTeams","newTeamId","currTeamId","lastAddedTodo","lastAddedEvent","Fragment","listOfAllTeams","AddTodo","onSubmitTodo","addTodoToTeam","membersList","memberDropdownItems","AddEvent","description","startTime","endTime","handleEndDateChange","handleStartDateChange","date","newEnd","setHours","getHours","newEvent","addEventToTeam","utils","DateFnsUtils","DateTimePicker","eventId","component","EventList","sortEvents","sortedFutureEvents","numPast","numFuture","pastEventsCompon","futureEventsCompon","EditEvent","eventToUpdate","updateEvent","EditTodo","updateTeamTodo","msgData","isSentByCurrUser","trimmedName","userName","msg","message","Messages","onScroll","refs","containerRef","scrollTop","emit","newMsgs","msgs","ENDPOINT","io","ReactDOM","findDOMNode","shouldScrollToBottom","clientHeight","scrollHeight","height","addChatMsg","chatData","getChatHistory","useState","setUserName","currUserId","setCurrUserId","setTeam","messages","setMessages","setMessage","useRef","useEffect","on","off","onKeyPress","Tags","addTagClick","tagData","tagDesc","tagColors","Math","floor","random","tagId","initState","loading","messagesList","combineReducers","action","middlware","thunk","store","createStore","rootReducer","compose","applyMiddleware","jwtToken","currentTime","now","exp","href","App","exact","path","Note","Chat","Message","Boolean","hostname","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20949fab.chunk.js","sourcesContent":["/*\r\nUsed to set and delete the Authorization token for axios requests \r\ndepending on if a user is logged in or not\r\n*/\r\n\r\nimport axios from 'axios';\r\n\r\nconst setAuthToken = token => {\r\n    if (token){\r\n        // apply auth token to all request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }\r\n    else{\r\n        // delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n}\r\n\r\nexport default setAuthToken;","/*\r\nAll of the actions that have to do with authentication, including:\r\nRegister user\r\nLog the user in\r\nLog the user out\r\n*/\r\n\r\nimport axios from 'axios';\r\nimport setAuthToken from '../../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nimport {GET_ERRORS, SET_CURRENT_USER, USER_LOADING} from './types';\r\n\r\n// action for registering the user\r\nexport const registerUser = (userData, history) => dispatch => {\r\n    axios.post('/users/register', userData)\r\n        .then(res => {\r\n            // successfully registered, so let the user login\r\n            console.log(res);\r\n            history.push(\"/login\");\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: GET_ERRORS, payload: err.response.data});\r\n        })\r\n}\r\n\r\n// action for login the user\r\nexport const loginUser = userData => dispatch => {\r\n    axios.post('/users/login', userData)\r\n        .then(res => {\r\n            // save users token to local storage and set the current user\r\n            const {token} = res.data;\r\n            localStorage.setItem(\"jwtToken\", token);\r\n            // set token to auth header\r\n            setAuthToken(token);\r\n            const decodedToken = jwt_decode(token);\r\n            dispatch(setCurrentUser(decodedToken));\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data,\r\n            })\r\n        })\r\n}\r\n\r\n// set the logged in user\r\nexport const setCurrentUser = decodedToken => {\r\n    return {\r\n        type:SET_CURRENT_USER, \r\n        payload: decodedToken,\r\n    }\r\n}\r\n\r\n// set user loading\r\nexport const setUserLoading = () => {\r\n    return {\r\n        type: USER_LOADING,\r\n    }\r\n}\r\n\r\n// log user out\r\nexport const logoutUser = () => dispatch => {\r\n    // remove token from local storage\r\n    localStorage.removeItem(\"jwtToken\");\r\n    // remove auth header for future requests\r\n    setAuthToken(false);\r\n    // set the curr user to {}, which sets isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n}","/*\r\nHolds the types of actions that can be possibly dispatched by this application\r\n*/\r\n\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const JOIN_TEAM = \"JOIN_TEAM\";\r\nexport const GET_TEAMS_WITH_PROMPT = \"GET_TEAMS_WITH_PROMPT\";\r\nexport const GET_TEAM_WITH_ID = \"GET_TEAM_WITH_ID\";\r\nexport const GET_ALL_TEAMS = \"GET_ALL_TEAMS\";\r\nexport const EDIT_TEAM = \"EDIT_TEAM\";\r\n\r\nexport const ADD_NOTE_TO_TEAM = \"ADD_NOTE_TO_TEAM\";\r\nexport const UPDATE_NOTE = \"UPDATE_NOTE\";\r\nexport const DELETE_NOTE = \"DELETE_NOTE\";\r\n\r\nexport const ADD_TODO_TO_TEAM = \"ADD_TODO_TO_TEAM\";\r\nexport const COMPLETE_TODO = \"COMPLETE_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\nexport const EDIT_TODO = \"EDIT_TODO\";\r\n\r\nexport const ADD_EVENT_TO_TEAM = \"ADD_EVENT_TO_TEAM\";\r\nexport const DELETE_EVENT = \"DELETE_EVENT\";\r\nexport const UPDATE_EVENT = \"UPDATE_EVENT\";\r\n\r\nexport const ADD_CHAT_MSG = \"ADD_CHAT_MSG\";\r\nexport const GET_CHAT_HISTORY = \"GET_CHAT_HISTORY\";\r\n\r\nexport const ADD_TAG = \"ADD_TAG\";","import axios from 'axios';\r\n\r\nimport {JOIN_TEAM, GET_TEAMS_WITH_PROMPT, GET_TEAM_WITH_ID, GET_ALL_TEAMS, EDIT_TEAM,\r\n            ADD_TODO_TO_TEAM, COMPLETE_TODO, DELETE_TODO, EDIT_TODO,\r\n            ADD_CHAT_MSG,\r\n            GET_CHAT_HISTORY} from './types';\r\n\r\n// action for a given user joining a given team\r\nexport const joinTeam = (userData, teamData) => dispatch => {\r\n    const joinData = {userData, teamData}\r\n    axios.post('/teams/join', joinData)\r\n        .then(res => {\r\n            alert(res.data);\r\n            dispatch({\r\n                type: JOIN_TEAM,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\n// action for creating a team by a user\r\n/*\r\nTODO: DISPATCH\r\n*/\r\nexport const createTeam = (team, history) => dispatch => {\r\n    // submit team into the database and go back to team page\r\n    axios.post('/teams/add', team)\r\n        .then(res => {\r\n            console.log(res.data)\r\n            history.push('/');\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\n// action to get all teams given a search prompt\r\nexport const searchTeamWithPrompt = (prompt) => dispatch => {\r\n    // get all teams first\r\n    axios.get('/teams/')\r\n        .then(res => {\r\n            let match = [];\r\n            // go through all team names to check if matches the prompt\r\n            for (let i = 0; i < res.data.length; i++){\r\n                const teamName = res.data[i].teamName;\r\n                const newTeamName = teamName.slice(0, prompt.length).toLowerCase();\r\n                const newPrompt = prompt.toLowerCase();\r\n\r\n                // if the team matches, then add it to the match array to be returned\r\n                if (newTeamName === newPrompt){\r\n                    match.push(res.data[i])\r\n                }\r\n            }\r\n            // send match to reducer to update the state of TeamSearch component\r\n            dispatch({\r\n                type: GET_TEAMS_WITH_PROMPT,\r\n                payload: match,\r\n            })\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\n// get a team with the specific id\r\nexport const getTeamWithId = (id) => dispatch => {\r\n    // make get request to get a specific team\r\n    axios.get(`/teams/${id}`)\r\n        .then(res => {\r\n            // dispatch team to reducer to set the currteam state\r\n            dispatch({\r\n                type: GET_TEAM_WITH_ID,\r\n                payload: res.data,\r\n            })\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\n// get all teams\r\nexport const getAllTeams = () => dispatch => {\r\n    axios.get('/teams/')\r\n        .then(res => {\r\n            const listOfAllTeams = res.data;\r\n            dispatch({\r\n                type: GET_ALL_TEAMS,\r\n                payload: listOfAllTeams,\r\n            })\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\n// edit a specific team\r\nexport const editTeam = (teamData) => dispatch => {\r\n    axios.post(`/teams/update/${teamData.teamId}`, teamData)\r\n        .then(res => {\r\n            console.log(res);\r\n            dispatch({\r\n                type: EDIT_TEAM,\r\n                payload: res.data,\r\n            })\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\n// add new todo to a given team\r\nexport const addTodoToTeam = (teamData, todoData) => dispatch => {\r\n    axios.post('/teams/addtodo', {teamData, todoData})\r\n        .then(res => {\r\n            console.log(res);\r\n            dispatch({\r\n                type: ADD_TODO_TO_TEAM,\r\n                payload: res.data,\r\n            })\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\n// complete a given team's todo\r\nexport const completeTeamTodo = (teamData, todoData) => dispatch => {\r\n    axios.post('/teams/completetodo', {teamData, todoData})\r\n        .then(res => {\r\n            console.log(res);\r\n            dispatch({\r\n                type: COMPLETE_TODO,\r\n                payload: res.data,\r\n            })\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\n// delete a todo\r\nexport const deleteTeamTodo = (teamData, todoData) => dispatch => {\r\n    axios.post('/teams/deletetodo', {teamData, todoData})\r\n        .then(res => {\r\n            console.log(res);\r\n            \r\n            dispatch({\r\n                type: DELETE_TODO,\r\n                payload: {},\r\n            })\r\n        })\r\n}\r\n\r\n// edit a todo\r\nexport const updateTeamTodo = (teamData, todoData) => dispatch => {\r\n    console.log(todoData);\r\n    axios.post('/teams/updatetodo', {teamData, todoData})\r\n        .then(res => {\r\n            console.log(res);\r\n            dispatch({\r\n                type: EDIT_TODO,\r\n                payload: res.data,\r\n            })\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\n// add a chat message\r\nexport const addChatMsg = (teamData, chatData) => dispatch => {\r\n    axios.post('/teams/chat/add', {teamData, chatData})\r\n        .then(res => {\r\n            dispatch({\r\n                type: ADD_CHAT_MSG,\r\n                payload: res.data,\r\n            })\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\n// get chat history\r\nexport const getChatHistory = (teamData) => dispatch => {\r\n    axios.get(`http://localhost:5000/teams/chat/${teamData._id}`)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CHAT_HISTORY,\r\n                payload: res.data,\r\n            })\r\n        })\r\n}","import React, {useEffect} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport './css/MembersModal.css';\r\nimport './css/SettingsModal.css';\r\n\r\nclass SettingsModal extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleOutsideClick = this.handleOutsideClick.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // set event listener for checking if mouse click outside of modal\r\n        document.addEventListener('mousedown', this.handleOutsideClick);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //document.body.style.overflow = 'unset';\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    /*\r\n    set the wrapper ref for the modal so we can check if there\r\n    was a mouse click outside of the modal to close the modal\r\n    */\r\n    setWrapperRef(node){\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    /*\r\n    whenever click, checks if the click was inside or outside modal\r\n    */\r\n    handleOutsideClick(evt){\r\n        const {showModal, handleClose} = this.props;\r\n\r\n        // clicked outside of modal, so close modal\r\n        if (showModal && this.wrapperRef && !this.wrapperRef.contains(evt.target)) {\r\n            handleClose();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {showModal, handleLogout, children} = this.props;\r\n        const showModalClass = showModal ? 'member-modal-container' : 'display-none';\r\n\r\n        // makes page immovable while modal open\r\n        if (showModal) document.body.style.overflow = 'hidden';\r\n        else document.body.style.overflow = 'unset';\r\n\r\n        return(\r\n            <div className={showModalClass} ref={this.setWrapperRef}>\r\n                <Card className='settings-modal-main'>\r\n                    {\r\n                        children && children.length > 0 ? children.map(child => \r\n                            <p onClick={handleLogout} className='member-name child-name'>\r\n                                {child}\r\n                            </p>\r\n                        ) : null\r\n                    }\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SettingsModal;","import React from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport {logoutUser} from '../../redux/actions/authActions';\r\nimport {connect} from 'react-redux';\r\nimport {joinTeam} from '../../redux/actions/teamActions';\r\nimport SettingsModal from '../modals/SettingsModal';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport './css/Home.css';\r\n\r\nclass Home extends React.Component{\r\n    constructor(){\r\n        super();\r\n        // currteam holds the id of the team the user is currently viewing\r\n        this.state = {\r\n            teams: [],\r\n            currTeam: '',\r\n            settings: ['Log out'],\r\n            showModal: false,\r\n        }\r\n\r\n        this.onLogoutClick = this.onLogoutClick.bind(this);\r\n        this.isUserInTeam = this.isUserInTeam.bind(this);\r\n        this.showModal = this.showModal.bind(this);\r\n        this.hideModal = this.hideModal.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        // show the list of teams in the database\r\n        const userId = this.props.auth.user.id;\r\n        axios.get('http://localhost:5000/teams/', userId)\r\n            .then(res => this.setState({teams: res.data}));\r\n    }\r\n\r\n    // checks if the user is in the teamMember list of this team\r\n    isUserInTeam(team){\r\n        // check if user is in the team\r\n        const {user} = this.props.auth;\r\n        const teamMembers = team.teamMembers;\r\n        let isInTeam = false;\r\n        for (let i = 0; i < teamMembers.length; i++){\r\n            if (teamMembers[i].user._id === user.id){\r\n                isInTeam = true;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return isInTeam;\r\n    }\r\n\r\n    // calls auth action to log user out and then refresh the page\r\n    onLogoutClick(evt){\r\n        evt.preventDefault();\r\n        this.props.logoutUser();\r\n        // since the user is now logged out, reload the page to take them to login\r\n        window.location.reload();\r\n    }\r\n\r\n    showModal = () => {this.setState({showModal: true})}\r\n\r\n    hideModal = () => {this.setState({showModal: false})}\r\n\r\n    render(){\r\n        // get the curr user of the app\r\n        const {user} = this.props.auth;\r\n    \r\n        // have all dropdown items be teams user is in\r\n        const teamsList = this.state.teams;\r\n        \r\n        const usersTeams = teamsList && teamsList.length > 0 ?\r\n            teamsList.map(team => {\r\n                // need to check if the user is in a certain team or not\r\n                const userIsInTeam = this.isUserInTeam(team);\r\n                // if the user is in the team, show it and if not don't show the team\r\n                return (userIsInTeam ? \r\n                    <Link className='team-item-link' to={{\r\n                        pathname: `/team/${team._id}`, \r\n                        state:{teamId: team._id}\r\n                    }}>\r\n                        <Card className='team-item'>\r\n                            <li className='color-blue'>\r\n                                {team.teamName}\r\n                            </li>\r\n                        </Card>\r\n                    </Link>\r\n                    : null)\r\n                \r\n            }) : null;\r\n\r\n        return(\r\n            <div className='home-container'>\r\n                <Card className='home-card-container'>         \r\n                    <div className='logout-container'>\r\n                        <MoreVertIcon fontSize='large' onClick={this.showModal}\r\n                            className='settings-icon'/>\r\n                        <SettingsModal showModal={this.state.showModal} handleClose={this.hideModal}\r\n                                children={this.state.settings} handleLogout={this.onLogoutClick} />\r\n                    </div>\r\n                \r\n                    <h2 className=\"welcome-text\">Welcome, {user.firstName}</h2>        \r\n                    <h5>Choose your team.</h5>\r\n                    <ul className='list-of-user-teams'>\r\n                        {usersTeams}\r\n                    </ul>\r\n                    <Link className='home-btn' to='/teamsearch'>Search for a new team!</Link>\r\n                    <Link className='home-btn create-team' to='/createTeam'>Create a new team here</Link>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//<TeamsList teams={this.state.teams} user={user} />\r\n\r\n// puts the state from the store into the props of this component\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    team: state.team,\r\n})\r\n\r\nexport default connect(mapStateToProps, {logoutUser, joinTeam})(Home);","import React from \"react\";\r\n\r\nconst AddTag = props => {\r\n    const {tags, addTag, deleteTag, currTeam} = props;\r\n\r\n    const tagDropdownItems = currTeam.teamTags && currTeam.teamTags.length > 0 ?\r\n    currTeam.teamTags.map(tag => {\r\n        // return the dropdown item for that specific tag\r\n        return(\r\n           <option value={tag.title} key={tag._id} className=\"tag-option\">{tag.title}</option>\r\n        )\r\n    }) : null;\r\n\r\n    return(\r\n        <div className=\"select-tag-container\">\r\n            {\r\n                // show the selected tags\r\n                tags && tags.length > 0 ? tags.map(tag => \r\n                    <div id={tag._id} key={tag._id} className=\"tagContainer added-tag\" style={{backgroundColor: tag.color}} onClick={deleteTag}>\r\n                        <p id={tag._id}>{tag.title}</p>   \r\n                    </div> ) : null\r\n            }\r\n            <select className=\"select-tag\" id=\"select-tag\">\r\n                {tagDropdownItems}\r\n            </select>\r\n            <button onClick={addTag} className=\"btn\">Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTag;","import axios from 'axios';\r\nimport {ADD_NOTE_TO_TEAM, UPDATE_NOTE, DELETE_NOTE} from './types';\r\n\r\n// add a note to the notes list for a given team\r\nexport const addNoteToTeam = (teamData, noteData) => dispatch => {\r\n    axios.post('/notes/add', {teamData, noteData})\r\n        .then(res1 => {\r\n            console.log(res1);\r\n            // add note's objectid to team's notes\r\n            const noteId = res1.data._id;\r\n            axios.post('/teams/addnote', {teamData, noteId})\r\n                .then(res2 => {\r\n                    console.log(res2);\r\n                    \r\n                    // updates the state with the newest note added\r\n                    dispatch({\r\n                        type: ADD_NOTE_TO_TEAM,\r\n                        payload: res1.data,\r\n                    })\r\n                })\r\n                \r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\n// updates a given note\r\nexport const updateNote = (noteData) => dispatch => {\r\n    axios.post('/notes/update', {noteData})\r\n        .then(res => {\r\n            console.log(res);\r\n\r\n            // updates state with the newest note modified\r\n            dispatch({\r\n                type: UPDATE_NOTE,\r\n                payload: res.data,\r\n            })\r\n        })\r\n}\r\n\r\n// delete a note\r\nexport const deleteNote = (noteData, teamData) => dispatch => {\r\n    // remove objectid of note from team and then delete note document\r\n    axios.post('/teams/deletenote', {noteData, teamData})\r\n        .then(res => {\r\n            // now delete the actual document\r\n            axios.post('/notes/delete', {noteData})\r\n                .then(res => {\r\n                    console.log(res);\r\n                    // updates state with null (newest note was deleted)\r\n                    dispatch({\r\n                        type: DELETE_NOTE,\r\n                        payload: {deleted: true},\r\n                    })\r\n                })\r\n                .catch(err => console.log('error!!', err))\r\n        })\r\n        .catch(err => console.log('error: ', err))\r\n}","import React from 'react';\r\nimport AddTag from \"../tags/AddTag\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nimport OfflinePinOutlinedIcon from '@material-ui/icons/OfflinePinOutlined';\r\nimport OfflinePinIcon from '@material-ui/icons/OfflinePin';\r\n\r\nimport {updateNote, deleteNote, addNoteToTeam} from '../../redux/actions/noteActions';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './css/EditNote.css';\r\n\r\nclass EditNote extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            body: '',\r\n            pinned: false,\r\n            fromChat: false,\r\n            tags: [],\r\n            selectedTag:{}\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onDeleteNote = this.onDeleteNote.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.props);\r\n        // if there's a note that was sent, set it\r\n        const {currNote} = this.props;\r\n        if (currNote){\r\n            this.setState({\r\n                title: currNote.noteTitle, \r\n                body: currNote.noteBody,\r\n                pinned: currNote.pinned,\r\n                tags: currNote.tags,\r\n                fromChat: this.props.fromChat,\r\n            })\r\n        }\r\n    }\r\n\r\n    /*\r\n    When travel to component, will receive props from NotesList (the current note object),\r\n    so this lifecycle allows us to update the state with these incoming props\r\n    */\r\n    componentWillReceiveProps(nextProps){\r\n        // if unselected a note, then set state items to null\r\n        if (nextProps.currNote === null){\r\n            this.setState({\r\n                title: '',\r\n                body: '',\r\n                pinned: false,\r\n            })\r\n            return;\r\n        }\r\n\r\n        // when receive props, set the state to the current note\r\n        if (nextProps.currNote !== this.props.currNote){\r\n            this.setState({\r\n                title: nextProps.currNote.noteTitle,\r\n                body: nextProps.currNote.noteBody,\r\n                pinned: nextProps.currNote.pinned,\r\n                tags: nextProps.currNote.tags,\r\n                fromChat: nextProps.fromChat,\r\n            })\r\n        }\r\n    }\r\n\r\n    selectTag = evt => {\r\n        console.log(evt);\r\n        this.setState({selectedTag: evt.target.innerText})\r\n    }\r\n\r\n    deleteTag = evt => {\r\n        // find tag with the id in list of tags\r\n        const {id} = evt.target;\r\n\r\n        this.setState(prevState => {\r\n            const {tags} = prevState;\r\n\r\n            for (let i = 0; i < tags.length; i++){\r\n                // remove the tag\r\n                if (tags[i]._id === id){\r\n                    console.log(tags[i])\r\n                    tags.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            return {tags};\r\n        });\r\n    }\r\n\r\n    addTag = evt => {\r\n        evt.preventDefault();\r\n        // get the tag then put into array of tags\r\n        const tag = document.getElementById(\"select-tag\").value;        \r\n\r\n        // check if tag is already added and make sure no more than 3 tags are added\r\n        const {tags} = this.state;\r\n        if (tags.length >= 3){\r\n            alert(\"You can only add up to 3 tags\");\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < tags.length; i++){\r\n            if (tags[i].title === tag){\r\n                alert(\"You already added this tag\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        // find the tag in the list of tags (since all tag titles are unique) to get full object\r\n        const {currTeam} = this.props;\r\n        const {teamTags} = currTeam;\r\n        let selTag = {}\r\n        for (let i = 0; i < teamTags.length; i++){\r\n            if (teamTags[i].title === tag){\r\n                selTag = teamTags[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.setState(prevState => {\r\n             // add newly typed tag to tag list\r\n             const tags = prevState.tags.concat(selTag);\r\n             return {tags}\r\n        })\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n        const {user} = this.props.auth;\r\n\r\n        const noteData = {\r\n            noteId: this.props.currNote._id,\r\n            noteTitle: this.state.title,\r\n            noteBody: this.state.body,\r\n            author: user.firstName + ' ' + user.lastName,\r\n            pinned: this.state.pinned,\r\n            tags: this.state.tags,\r\n        }\r\n        console.log(this.state.fromChat);\r\n        // if have not chosen a note to edit or its a note created from chat, create a new note\r\n        if (Object.entries(this.props.currNote).length === 0 || this.state.fromChat){\r\n            const teamData = this.props.currTeam;\r\n            this.props.addNoteToTeam(teamData, noteData);   \r\n            //window.location.reload();\r\n            return;\r\n        }\r\n        \r\n        // update the note in the db if selected a note\r\n        this.props.updateNote(noteData);\r\n        //window.location.reload();\r\n    }\r\n\r\n    onDeleteNote(evt){\r\n        evt.preventDefault();\r\n        console.log(this.props.currNote);\r\n        this.props.deleteNote(this.props.currNote);\r\n    }\r\n\r\n    onChange(evt){\r\n        const name = evt.target.name;\r\n        this.setState({[name]: evt.target.value})\r\n    }\r\n\r\n    render(){\r\n        const {currTeam} = this.props;\r\n        const {tags} = this.state;\r\n\r\n        return(\r\n            <div className='edit-note-container'>\r\n                <form>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={10}>\r\n                            <input type='text' name='title' className='note-title no-border' onChange={this.onChange}\r\n                                value={this.state.title} autoComplete='off' placeholder=\"What's on your mind?\"/>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            {\r\n                                this.state.pinned ?\r\n                                    <OfflinePinIcon className='pinned-btn' onClick={evt => {\r\n                                        evt.preventDefault(); \r\n                                        this.setState({pinned: false})\r\n                                    }}/> :\r\n                                    <OfflinePinOutlinedIcon className='pinned-btn' onClick={evt => {\r\n                                        evt.preventDefault(); \r\n                                        this.setState({pinned: true})\r\n                                    }} />\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <textarea className='note-body no-border' name='body' rows='12' onChange={this.onChange} \r\n                        value={this.state.body} placeholder='Starting typing...'/>\r\n                    \r\n                    <AddTag tags={tags} addTag={this.addTag} deleteTag={this.deleteTag} currTeam={currTeam}/>\r\n\r\n                    <div className='btn-container'>\r\n                        <button className='submit-btn btn' onClick={this.onSubmit}>Submit</button>\r\n                        <button className='delete-btn btn' onClick={this.onDeleteNote}>Delete</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n})\r\n\r\nexport default connect(mapStateToProps, {updateNote, deleteNote, addNoteToTeam})(EditNote);","import React from 'react';\r\n\r\nimport {getTeamWithId} from '../../redux/actions/teamActions';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport OfflinePinOutlinedIcon from '@material-ui/icons/OfflinePinOutlined';\r\nimport OfflinePinIcon from '@material-ui/icons/OfflinePin';\r\nimport EditNote from './EditNote';\r\n\r\n// for right click context menu to delete\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport {deleteNote} from '../../redux/actions/noteActions';\r\n\r\nimport './css/NotesList.css';\r\n\r\nclass NotesList extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            currNote:{},\r\n            fromChat: false,\r\n        }\r\n        this.onContextItemClick = this.onContextItemClick.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        // if added a note, then should refresh to show new note\r\n        if (this.props.note.lastAddedNote != prevProps.note.lastAddedNote){\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // get the current team and store in state\r\n        const {id} = this.props.match.params;\r\n        // get the team that the user is viewing\r\n        this.props.getTeamWithId(id);\r\n\r\n        // if there is a current note sent from home/chat, then show it immedaitely\r\n        if (this.props.location.state){\r\n            const {currNote} = this.props.location.state;\r\n            const {fromChat} = this.props.location.state;\r\n            this.setState({currNote, fromChat})\r\n        }\r\n    }\r\n\r\n    onContextItemClick(evt, data){\r\n        // data holds the note that was right clicked\r\n        const teamData = this.props.team.currTeam;\r\n        console.log(teamData);\r\n        this.props.deleteNote(data.noteData, teamData);\r\n        // reload page to show deletions\r\n        window.location.reload();\r\n    }\r\n\r\n    render(){\r\n        const {currTeam} = this.props.team;\r\n\r\n        // make a component to show all notes\r\n        const notesList = currTeam.teamNotes;\r\n        console.log(notesList)\r\n        const pinnedNotesCompon = notesList && notesList.length > 0 ?\r\n            notesList.map(note => {\r\n                const lastUpdated = new Date(note.updatedAt);\r\n                return note.pinned ?\r\n                    // if this is the note that the user is viewing in edit, outline it\r\n                    this.state.currNote === note ?\r\n                        <div key={note._id}>\r\n                            <ContextMenuTrigger id={note._id}>\r\n                                <Card key={note._id} onClick={() => {\r\n                                    // if already selected, unselect\r\n                                    if (this.state.currNote === note){\r\n                                        this.setState({currNote: null})\r\n                                    }\r\n                                    else this.setState({currNote: note})\r\n                                }}\r\n                                    className='note-card selected'>\r\n                                    <Grid container spacing={1}>\r\n                                        <Grid item xs={10}>\r\n                                            <p className='note-details'>Last updated: {lastUpdated.toLocaleString()}</p>\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <OfflinePinIcon className='pinned-btn'/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <h4 className='indiv-note-title'>{note.noteTitle}</h4>\r\n                                    <p>{note.noteBody.slice(0, 110)}</p>\r\n                                    <p className='note-details note-author'>{note.author}</p>\r\n                                    {\r\n                                        // show all note tags\r\n                                        note.tags && note.tags.length > 0 ? note.tags.map(tag =>\r\n                                            <div id={tag._id} key={tag._id} className=\"sm-tag-container\" style={{backgroundColor: tag.color}} onClick={this.deleteTag}>\r\n                                                <p id={tag._id}>{tag.title}</p>   \r\n                                            </div>\r\n                                        ) : null\r\n                                    }\r\n                                </Card> \r\n                            </ContextMenuTrigger>\r\n                            <ContextMenu id={note._id} className='context-menu-container'>\r\n                                <MenuItem className='context-menu-item' data={{noteData: note}} \r\n                                    onClick={this.onContextItemClick}>\r\n                                    Delete\r\n                                </MenuItem>\r\n                            </ContextMenu>\r\n                        </div> :\r\n                        <div key={note._id}>\r\n                            <ContextMenuTrigger id={note._id}>\r\n                                <Card className='note-card' key={note._id} \r\n                                    onClick={() => {\r\n                                        // if already selected, unselect\r\n                                        if (this.state.currNote === note){\r\n                                            this.setState({currNote: null})\r\n                                        }\r\n                                        else this.setState({currNote: note})\r\n                                    }}>\r\n                                    <Grid container spacing={1}>\r\n                                        <Grid item xs={10}>\r\n                                            <p className='note-details'>Last updated: {lastUpdated.toLocaleString()}</p>\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <OfflinePinIcon className='pinned-btn'/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <h4 className='indiv-note-title'>{note.noteTitle}</h4>\r\n                                    <p>{note.noteBody.slice(0, 110)}</p>\r\n                                    <p className='note-details note-author'>{note.author}</p>\r\n                                    {\r\n                                        // show all note tags\r\n                                        note.tags && note.tags.length > 0 ? note.tags.map(tag =>\r\n                                            <div id={tag._id} key={tag._id} className=\"sm-tag-container\" style={{backgroundColor: tag.color}} onClick={this.deleteTag}>\r\n                                                <p id={tag._id}>{tag.title}</p>   \r\n                                            </div>\r\n                                        ) : null\r\n                                    }\r\n                                </Card>\r\n                            </ContextMenuTrigger>\r\n                            <ContextMenu id={note._id} className='context-menu-container'>\r\n                                <MenuItem className='context-menu-item' data={{noteData: note}} \r\n                                    onClick={this.onContextItemClick}>\r\n                                        Delete\r\n                                </MenuItem>\r\n                            </ContextMenu>\r\n                        </div>\r\n                : null\r\n            })\r\n        : null;\r\n\r\n        // show all unpinned notes after the pinned notes in the list\r\n        const unpinnedNotesCompon = notesList && notesList.length > 0 ?\r\n            notesList.map(note => {\r\n                const lastUpdated = new Date(note.updatedAt);\r\n                return !note.pinned ?\r\n                    // if this is the note that the user is viewing in edit, outline it\r\n                    this.state.currNote === note ? \r\n                        <div key={note._id}>\r\n                            <ContextMenuTrigger id={note._id}>\r\n                                <Card key={note._id} onClick={() => {\r\n                                    // if already selected, unselect\r\n                                    if (this.state.currNote === note){\r\n                                        this.setState({currNote: null})\r\n                                    }\r\n                                    else this.setState({currNote: note})\r\n                                }}\r\n                                    className='note-card selected'>\r\n                                    <Grid container spacing={1}>\r\n                                        <Grid item xs={10}>\r\n                                            <p className='note-details'>Last updated: {lastUpdated.toLocaleString()}</p>\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <OfflinePinOutlinedIcon className='pinned-btn'/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <h4 className='indiv-note-title'>{note.noteTitle}</h4>\r\n                                    <p>{note.noteBody.slice(0, 110)}</p>\r\n                                    <p className='note-details note-author'>{note.author}</p>\r\n                                    {\r\n                                        // show all note tags\r\n                                        note.tags && note.tags.length > 0 ? note.tags.map(tag =>\r\n                                            <div id={tag._id} key={tag._id} className=\"sm-tag-container\" style={{backgroundColor: tag.color}} onClick={this.deleteTag}>\r\n                                                <p id={tag._id}>{tag.title}</p>   \r\n                                            </div>\r\n                                        ) : null\r\n                                    }\r\n                                </Card>\r\n                            </ContextMenuTrigger>\r\n                            <ContextMenu id={note._id} className='context-menu-container'>\r\n                                <MenuItem className='context-menu-item' data={{noteData: note}} \r\n                                    onClick={this.onContextItemClick}>\r\n                                        Delete\r\n                                </MenuItem>\r\n                            </ContextMenu>\r\n                        </div> :\r\n                        <div key={note._id}>\r\n                            <ContextMenuTrigger id={note._id}>\r\n                                <Card className='note-card' key={note._id} \r\n                                    onClick={() => {\r\n                                        // if already selected, unselect\r\n                                        if (this.state.currNote === note){\r\n                                            this.setState({currNote: null})\r\n                                        }\r\n                                        else this.setState({currNote: note})\r\n                                    }}>\r\n                                    <Grid container spacing={1}>\r\n                                        <Grid item xs={10}>\r\n                                            <p className='note-details'>Last updated: {lastUpdated.toLocaleString()}</p>\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <OfflinePinOutlinedIcon className='pinned-btn'/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <h4 className='indiv-note-title'>{note.noteTitle}</h4>\r\n                                    <p>{note.noteBody.slice(0, 110)}</p>\r\n                                    <p className='note-details note-author'>{note.author}</p>\r\n                                    {\r\n                                        // show all note tags\r\n                                        note.tags && note.tags.length > 0 ? note.tags.map(tag =>\r\n                                            <div id={tag._id} key={tag._id} className=\"sm-tag-container\" style={{backgroundColor: tag.color}} onClick={this.deleteTag}>\r\n                                                <p id={tag._id}>{tag.title}</p>   \r\n                                            </div>\r\n                                        ) : null\r\n                                    }\r\n                                </Card>\r\n                            </ContextMenuTrigger>\r\n                            <ContextMenu id={note._id} className='context-menu-container'>\r\n                                <MenuItem className='context-menu-item' data={{noteData: note}} \r\n                                    onClick={this.onContextItemClick}>\r\n                                        Delete\r\n                                </MenuItem>\r\n                            </ContextMenu>\r\n                        </div>\r\n                : null\r\n            })\r\n        : null;\r\n\r\n        return(\r\n            <div className='total-notes-container'>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={1}>\r\n                        <ArrowBackIosIcon fontSize='large' className='back-btn' \r\n                            onClick={() => this.props.history.push(`/team/${currTeam._id}`)} />\r\n                    </Grid>\r\n                    <Grid item xs={11}>\r\n                        <h1 className='note-list-title'>Notes for {currTeam.teamName}</h1>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    <Grid className='note-list-container 'item xs={4}>\r\n                        {pinnedNotesCompon}\r\n                        {unpinnedNotesCompon}\r\n                    </Grid>\r\n                    <Grid item xs={8} className='edit-note-container'>\r\n                        <EditNote currNote={this.state.currNote} currTeam={currTeam} \r\n                            fromChat={this.state.fromChat}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    team: state.team,\r\n    note: state.note,\r\n})\r\n\r\nexport default connect(mapStateToProps, {getTeamWithId, deleteNote})(NotesList);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n// material ui\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport OfflinePinOutlinedIcon from '@material-ui/icons/OfflinePinOutlined';\r\nimport OfflinePinIcon from '@material-ui/icons/OfflinePin';\r\n\r\n// for right click context menu to delete\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport {deleteNote} from '../../redux/actions/noteActions';\r\n\r\n/*\r\nA single note for a given team. The note's id will be sent\r\nto this component, and call a note action that retrieves the note\r\nwith the given id\r\n*/\r\nclass NoteView extends React.Component{\r\n    onContextItemClick = (evt, data) => {\r\n        // data holds the note that was right clicked\r\n        const teamData = this.props.currTeam;\r\n        console.log(teamData);\r\n        this.props.deleteNote(data.noteData, teamData);\r\n        // reload page to show deletions\r\n        window.location.reload();\r\n    }\r\n\r\n    render(){\r\n        const {note, currNote, setCurrNote} = this.props;\r\n        const lastUpdated = new Date(note.updatedAt);\r\n\r\n        return(\r\n            <div key={note._id}>\r\n                <ContextMenuTrigger id={note._id}>\r\n                    <Card className='note-card' key={note._id} \r\n                        onClick={() => {\r\n                            // if already selected, unselect\r\n                            if (currNote === note){\r\n                                //this.setState({currNote: null})\r\n                                setCurrNote(null);\r\n                            }\r\n                            //else this.setState({currNote: note})\r\n                            else setCurrNote(note);\r\n                        }}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={10}>\r\n                                <p className='note-details'>Last updated: {lastUpdated.toLocaleString()}</p>\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <OfflinePinOutlinedIcon className='pinned-btn'/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <h4 className='indiv-note-title'>{note.noteTitle}</h4>\r\n                        <p>{note.noteBody.slice(0, 110)}</p>\r\n                        <p className='note-details note-author'>{note.author}</p>\r\n                        {\r\n                            // show all note tags\r\n                            note.tags && note.tags.length > 0 ? note.tags.map(tag =>\r\n                                <div id={tag._id} key={tag._id} className=\"sm-tag-container\" style={{backgroundColor: tag.color}}>\r\n                                    <p id={tag._id}>{tag.title}</p>   \r\n                                </div>\r\n                            ) : null\r\n                        }\r\n                    </Card>\r\n                </ContextMenuTrigger>\r\n                <ContextMenu id={note._id} className='context-menu-container'>\r\n                    <MenuItem className='context-menu-item' data={{noteData: note}} \r\n                        onClick={this.onContextItemClick}>\r\n                            Delete\r\n                    </MenuItem>\r\n                </ContextMenu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, {deleteNote})(NoteView);","/*\r\nShows all untagged notes and tag folders, where the user can click on a \r\ntag folder to view the notes with that specific tag\r\n*/\r\nimport React from \"react\";\r\nimport NoteView from \"./NoteView\";\r\nimport EditNote from \"./EditNote\";\r\nimport {getTeamWithId} from '../../redux/actions/teamActions';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// material design\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\nimport \"./css/AllNotes.css\";\r\n\r\n// modal for editing and adding a note\r\nimport ReactModal from 'react-modal';\r\nconst modalStyles = {\r\n    content : {\r\n        top : '50%',\r\n        left : '50%',\r\n        right : 'auto',\r\n        bottom : 'auto',\r\n        marginRight : '-50%',\r\n        transform : 'translate(-50%, -50%)'\r\n    }\r\n};\r\nReactModal.setAppElement('#root')\r\n\r\nclass AllNotes extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            currNote:{},\r\n            fromChat: false,\r\n            modalOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // get the current team with the passed in id, put into props using redux\r\n        const {teamid} = this.props.match.params;\r\n        // get the team that the user is viewing\r\n        this.props.getTeamWithId(teamid);\r\n    }\r\n\r\n    setCurrNote = newCurr => this.setState({currNote: newCurr})\r\n\r\n    render(){\r\n        // get the curr team from props (put into props in componentDidMount)\r\n        const {currTeam} = this.props.team;\r\n        // get a list of all tags (will be folders)\r\n        const {teamTags} = currTeam;\r\n        const {teamNotes} = currTeam;\r\n\r\n        // get the current note selected to show in edit modal\r\n        const {currNote, modalOpen} = this.state;\r\n        console.log(modalOpen);\r\n        return(\r\n            <div className=\"all-notes-container\" id=\"all-notes-container\">\r\n                <ReactModal isOpen={modalOpen} onRequestClose={() => this.setState({modalOpen: false})}\r\n                    style={{modalStyles}}>\r\n                    <p className=\"exit-modal\" onClick={() => this.setState({modalOpen: false})}>X</p>\r\n                    <EditNote currNote={currNote} currTeam={currTeam} fromChat={this.state.fromChat}/>\r\n                </ReactModal>\r\n\r\n                <div className=\"header-container\">\r\n                    <ArrowBackIosIcon fontSize='large' className='back-btn' \r\n                        onClick={() => this.props.history.goBack()} />\r\n                    <h1 className=\"header-text\">Notes</h1>\r\n                    <button className=\"add-btn\" onClick={() => this.setState({modalOpen: true})}>Add</button>\r\n                </div>\r\n                \r\n                <h3 className=\"section-title\">Tags</h3>\r\n                <div className=\"folder\">\r\n                {\r\n                    // render all team tags as a folder\r\n                    teamTags && teamTags.length > 0 ? teamTags.map(tag => \r\n                        <Link to={{\r\n                                pathname: `/team/${currTeam._id}/notes/tag/${tag._id}`,\r\n                                state: { currTeam, tag }\r\n                            }} key={tag._id} className=\"tag-folder-link\">\r\n                            <p className=\"tag-folder-item\">\r\n                                <FolderIcon className=\"folder-icon\"/>\r\n                                {tag.title}\r\n                            </p>\r\n                        </Link>\r\n                    ) : null\r\n                }\r\n                </div>\r\n                <h3 className=\"section-title\">Untagged notes</h3>\r\n                <div className=\"untagged-notes\">\r\n                {\r\n                    // render all untagged notes\r\n                    teamNotes && teamNotes.length > 0 ? teamNotes.map(note => \r\n                        note.tags.length === 0 ? \r\n                            <div onClick={() => this.setState({modalOpen: true})}>\r\n                                <NoteView key={note._id} currTeam={currTeam} note={note} currNote={this.state.currNote} \r\n                                    setCurrNote={this.setCurrNote}/>\r\n                            </div>\r\n                            : null\r\n                    ) : <p>No notes to show!</p>\r\n                }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    team: state.team,\r\n    note: state.note,\r\n})\r\n\r\nexport default connect(mapStateToProps, {getTeamWithId})(AllNotes);","/*\r\n/:teamid/notes/:tagid\r\n\r\nShows a list of all notes with a given tag\r\n*/\r\nimport React from \"react\";\r\nimport NoteView from \"./NoteView\";\r\nimport EditNote from \"./EditNote\";\r\n\r\n// material ui\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\nimport \"./css/AllNotes.css\";\r\n\r\n// modal for editing and adding a note\r\nimport ReactModal from 'react-modal';\r\nconst modalStyles = {\r\n    content : {\r\n        top : '50%',\r\n        left : '50%',\r\n        right : 'auto',\r\n        bottom : 'auto',\r\n        marginRight : '-50%',\r\n        transform : 'translate(-50%, -50%)'\r\n    }\r\n};\r\nReactModal.setAppElement('#root');\r\n\r\nclass TagNoteList extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            currNote: {},\r\n            modalOpen: false,\r\n            fromChat: false,\r\n        }\r\n    }\r\n\r\n    /*\r\n        Given a list of notes, find all notes with the given tag\r\n    */\r\n    findNotesWithTag = (notes, tagid) => {\r\n        let notesWithTag = [];\r\n        for (let i = 0; i < notes.length; i++){\r\n            // go through tags list for this note (will be no more than 3)\r\n            for (let j = 0; j < notes[i].tags.length; j++){\r\n                if (notes[i].tags[j]._id.toString() === tagid){\r\n                    notesWithTag.push(notes[i]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return notesWithTag;\r\n    }\r\n\r\n    setCurrNote = newCurr => this.setState({currNote: newCurr})\r\n\r\n    render(){\r\n        // get the current team from passed props and tag id\r\n        const { currTeam, tag } = this.props.location.state;\r\n        const { tagid } = this.props.match.params;\r\n        const { currNote, fromChat, modalOpen } = this.state;\r\n        const notesWithTag = this.findNotesWithTag(currTeam.teamNotes, tagid); \r\n        console.log(modalOpen);\r\n\r\n        return(\r\n            <div className=\"all-notes-container\">\r\n                <ReactModal isOpen={modalOpen} onRequestClose={() => this.setState({modalOpen: false})}\r\n                    style={{modalStyles}}>\r\n                    <p className=\"exit-modal\" onClick={() => this.setState({modalOpen: false})}>X</p>\r\n                    <EditNote currNote={currNote} currTeam={currTeam} fromChat={fromChat}/>\r\n                </ReactModal>\r\n\r\n                 <div className=\"header-container\">\r\n                    <ArrowBackIosIcon fontSize='large' className='back-btn' \r\n                        onClick={() => this.props.history.goBack()} />\r\n                    <h1 className=\"section-title\">tags/{tag.title}</h1>\r\n                </div>\r\n\r\n                <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\r\n                {\r\n                    // render all notes with the passed in tag\r\n                    notesWithTag && notesWithTag.length > 0 ? notesWithTag.map(note => \r\n                        <div onClick={() => this.setState({modalOpen: true})}>\r\n                            <NoteView key={note._id} currTeam={currTeam} note={note} currNote={this.state.currNote}\r\n                                setCurrNote={newCurr => this.setState({currNote: newCurr})} />\r\n                        </div>\r\n                ) : <p>No notes exist with this tag</p>\r\n                }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TagNoteList;","import React, {useState, useEffect, useRef} from 'react';\r\nimport io from 'socket.io-client';\r\nimport Messages from './Messages';\r\nimport { connect } from 'react-redux';\r\nimport {addChatMsg, getChatHistory} from '../../redux/actions/teamActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport GradeIcon from '@material-ui/icons/Grade';\r\n\r\nimport './css/Chat.css';\r\n\r\nlet socket;\r\n\r\nconst Chat = (props) => {\r\n    const [userName, setUserName] = useState('');\r\n    const [currUserId, setCurrUserId] = useState('');\r\n    const [team, setTeam] = useState({});\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const ENDPOINT = 'localhost:5000';\r\n    const containerRef = useRef(null);\r\n\r\n    /*\r\n    handles joining and leaving team chat rooms\r\n    */\r\n    useEffect(() => {\r\n        // get the user that's on the chat and the team that this chat is for\r\n        const {currTeam} = props.location.state;\r\n        const {user} = props.auth;\r\n\r\n        socket = io(ENDPOINT);\r\n\r\n        setUserName(user.firstName + ' ' + user.lastName);\r\n        setCurrUserId(user.id);\r\n        setTeam(currTeam);\r\n\r\n        // emit a join event to let the user join the team chat\r\n        socket.emit('join', {user, currTeam}, () => console.log('yeet'));\r\n\r\n        // get the chat history for this chat (obtained in backend and event is sent to frontend)\r\n        socket.on('old msgs', msgs => {\r\n            setMessages(msgs);\r\n        })\r\n\r\n        // return is the same as componentdidunmount (to disconnect socket)\r\n        return () => {\r\n            socket.emit('disconnect');\r\n            socket.off();\r\n        }\r\n    }, [props.location.state, ENDPOINT])\r\n\r\n    /*\r\n    handles sending messages\r\n    */\r\n    useEffect(() => {\r\n        socket.on('message', (msg) => {\r\n            // add new message to the array of messages for the chat\r\n            setMessages([...messages, msg]);\r\n        })\r\n    }, [messages])\r\n\r\n    /*\r\n    event handler to send messages \r\n    */\r\n    const sendMessage = (evt) => {\r\n        if (message){\r\n            socket.emit('sendMessage', message, () => setMessage(''));\r\n        }\r\n    }\r\n\r\n    \r\n    const onScroll = () => {\r\n        // when get new messages, append to current list of messages\r\n        const scrollTop = containerRef.scrollTop;\r\n        console.log(containerRef);\r\n        if (team){\r\n            //socket.emit('loadMoreMsgs', team, (newMsgs) => setMessages([...messages, newMsgs]));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div ref={containerRef} className='tot-chat-container'>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={1}>\r\n                    <ArrowBackIosIcon fontSize='large' className='back-btn' \r\n                        onClick={() => props.history.goBack()} />\r\n                </Grid>\r\n                <Grid item xs={11}>\r\n                    <h1 className='chat-title'>{team.teamName} Chat</h1>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={9}>\r\n                    <Messages msgs={messages} userName={userName} team={team}/>\r\n                    <input className='send-msg' value={message} onChange={evt => setMessage(evt.target.value)} \r\n                        onKeyPress={evt => {\r\n                            return evt.key === 'Enter' ? sendMessage(evt) : null\r\n                        }}\r\n                        placeholder=\"Start typing here\"/>\r\n                </Grid>\r\n                <Grid item xs={12} sm={3}>\r\n                    <h3 className='chat-member-list color-blue'>Team Members</h3>\r\n                    {\r\n                        // show all team members in this team\r\n                        team.teamMembers ? team.teamMembers.map(member => {\r\n                            const name = member.user.firstName + ' ' + member.user.lastName;\r\n                            // checks if the user in the list is curr user and if the user in the list is admin\r\n                            return currUserId === member.user._id ?\r\n                                member.isAdmin ? \r\n                                    <div className='admin-container'>\r\n                                        <GradeIcon className='admin-icon' fontSize='small' />\r\n                                        <p key={member._id}className='bold'>\r\n                                            {member.user.firstName} {member.user.lastName} (You)\r\n                                        </p>\r\n                                    </div> :\r\n                                    <p key={member._id}className='bold'>\r\n                                        {member.user.firstName} {member.user.lastName} (You)\r\n                                    </p> \r\n                                :  member.isAdmin ? \r\n                                    <div className='admin-container'>\r\n                                        <GradeIcon className='admin-icon' fontSize='small' />\r\n                                        <p key={member._id}>\r\n                                            {member.user.firstName} {member.user.lastName} \r\n                                        </p>\r\n                                    </div> :\r\n                                    <p key={member._id}>\r\n                                        {member.user.firstName} {member.user.lastName}\r\n                                    </p>   \r\n                        }) : null\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    team: state.team,\r\n});\r\n\r\nexport default connect(mapStateToProps, {addChatMsg, getChatHistory})(Chat);","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {loginUser} from '../../redux/actions/authActions';\r\n\r\nimport './css/Login.css';\r\n\r\nclass Login extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            errors: '',\r\n        }\r\n        \r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // if the user is logged in, redirect to home because they shouldn't be able to login\r\n        if(this.props.auth.isAuthenticated){\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        console.log(nextProps);\r\n        if (nextProps.auth.isAuthenticated){\r\n            // send user to dashboard if logged in already\r\n            this.props.history.push('/');\r\n        }\r\n\r\n        if (nextProps.error){\r\n            this.setState({errors: nextProps.error.err})\r\n        }\r\n    }\r\n\r\n    onChange(evt){\r\n        const changed = evt.target.name;\r\n        this.setState({[changed]: evt.target.value})\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n\r\n        const userData = {\r\n            username: this.state.username,\r\n            password: this.state.password,\r\n        }\r\n\r\n        // call the action loginUser to log the user in\r\n        this.props.loginUser(userData);\r\n    }\r\n\r\n    render(){\r\n        const {errors} = this.state;\r\n        console.log(errors);\r\n        return(\r\n            <div className='center container'>\r\n                <h1 className='title-text'>Login here.</h1>\r\n                <form onSubmit={this.onSubmit} className='center form-width'>\r\n                    <label className='create-label input-label'>Username</label>\r\n                    <input className='search-input' type='text' name='username' \r\n                        value={this.state.username} onChange={this.onChange}/>\r\n                    <label className='create-label input-label'>Password</label>\r\n                    <input className='search-input' type='password' name='password' \r\n                        value={this.state.password} onChange={this.onChange}/>\r\n                    <span className='error-text'>\r\n                        {errors}\r\n                    </span>\r\n\r\n                    <input className='btn' type='submit' value='Login' />\r\n                    <p className='m-20'>\r\n                        Don't have an account? Register <Link className='blue-link' to='/register'>here</Link>\r\n                    </p>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// puts the state from the store into the props of this component\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    error: state.error,\r\n});\r\n\r\nexport default connect(mapStateToProps, {loginUser})(Login);","import React from 'react';\r\nimport {withRouter, Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {registerUser} from '../../redux/actions/authActions';\r\n\r\nimport './css/Register.css';\r\n\r\nclass Register extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            email: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            errors: '',\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // if the user is logged in, redirect to home because they shouldn't be able to register\r\n        if(this.props.auth.isAuthenticated){\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        // if there are errors, then set the state\r\n        if (nextProps.error){\r\n            this.setState({errors: nextProps.error.err})\r\n        }\r\n    }\r\n\r\n    onChange(evt){\r\n        const changed = evt.target.name;\r\n        this.setState({[changed]: evt.target.value});\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n\r\n        const newUser = {\r\n            email: this.state.email,\r\n            username: this.state.username,\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            password: this.state.password,\r\n        }\r\n\r\n        this.props.registerUser(newUser, this.props.history);\r\n    }\r\n\r\n    render(){\r\n        const {errors} = this.state;\r\n        return(\r\n            <div className='center'>\r\n                <h1 className='title-text'>Register here.</h1>\r\n                <form className='center form-width' onSubmit={this.onSubmit}>\r\n                    <label className='create-label input-label'>Email</label>\r\n                    <input className='search-input' name='email' type='text' value={this.state.email} \r\n                        onChange={this.onChange} />\r\n                    <label className='create-label input-label'>Username</label>\r\n                    <input className='search-input' name='username' type='text' value={this.state.username} \r\n                        onChange={this.onChange} />\r\n                    <label className='create-label input-label'>First Name</label>\r\n                    <input className='search-input' name='firstName' type='text' value={this.state.firstName} \r\n                        onChange={this.onChange} />\r\n                    <label className='create-label input-label'>Last Name</label>\r\n                    <input className='search-input' name='lastName' type='text' value={this.state.lastName} \r\n                        onChange={this.onChange} />\r\n                    <label className='create-label input-label'>Password</label>\r\n                    <input className='search-input' name='password' type='password' value={this.state.password} \r\n                        onChange={this.onChange} />\r\n                    <span className='error-text'>\r\n                        {errors}\r\n                    </span>         \r\n                    <input className='btn' type='submit' value='Register' />\r\n                    <p className='m-20'>Have an account already? Login <Link className='blue-link' to='/login'>here</Link></p>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// get state from redux store and put it into this component's props\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    error: state.error,\r\n})\r\n\r\n// withRouter allows us to redirect within an action\r\nexport default connect(mapStateToProps, {registerUser})(withRouter(Register));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {createTeam} from '../../redux/actions/teamActions';\r\n\r\nimport './css/CreateTeam.css';\r\n\r\nclass CreateTeam extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            teamName: \"\",\r\n            teamDescription: \"\",\r\n            teamMembers: [],\r\n            teamNotes: [],\r\n            // will hold index of possibErrors if that error exists\r\n            currErrors: -1,\r\n        }\r\n\r\n        this.possibErrors = ['You need to enter a name and description']\r\n        \r\n        // binds the 'this' keyword inside of these functions to the entire class scope\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(evt){\r\n        // changes either teamname or description based on which form was edited\r\n        const changed = evt.target.name;\r\n        this.setState({\r\n            [changed]:evt.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit(evt){\r\n        // prevent default html form submit behavior\r\n        evt.preventDefault();\r\n\r\n        /* create the team object to send to database with the only member being the creator\r\n        const currUser = {\r\n            userId: this.props.auth.user.id,\r\n            firstName: this.props.auth.user.firstName,\r\n            lastName: this.props.auth.user.lastName,\r\n        }\r\n        */\r\n        // the creator of the team starts off as admin\r\n        const currUser = {\r\n            user: this.props.auth.user.id,\r\n            isAdmin: true,\r\n        };\r\n\r\n        // reset any errors that may have occurred\r\n        this.setState({currErrors: -1})\r\n\r\n        // if any of the state is empty, alert the user and don't move on\r\n        if (this.state.teamName.trim() === '' || this.state.teamDescription.trim() === ''){\r\n            this.setState({currErrors: 0})\r\n            return;\r\n        }\r\n\r\n        const team = {\r\n            teamName: this.state.teamName,\r\n            teamDescription: this.state.teamDescription,\r\n            teamMembers: [currUser],\r\n            teamNotes: this.state.teamNotes,\r\n        }\r\n\r\n        // call the team action to create the team. \r\n        // sending objid as a string, will convert to objid later\r\n        this.props.createTeam(team, this.props.history);\r\n    }\r\n\r\n    render(){\r\n        console.log(this.props.auth);\r\n        return(\r\n            <div className='create-team-container center'>\r\n                <h1 className='create-team-title'>Create your own team.</h1>\r\n                <form onSubmit={this.onSubmit} className='form-body'>\r\n                    <div className='form-body center'>\r\n                        <label className='create-label input-label'>What's your team's name?</label>\r\n                        <input className='search-input' name='teamName' type='text' \r\n                            value={this.state.teamName} onChange={this.onChange} />\r\n                        <label className='create-label input-label'>\r\n                            How would you describe your team? Provide a description.\r\n                        </label>\r\n                        <input className='search-input' name='teamDescription' type='text' \r\n                            value={this.state.teamDescription} onChange={this.onChange} />\r\n                        {\r\n                            // show any errors\r\n                            this.state.currErrors !== -1 ?\r\n                                <p className='error'>{this.possibErrors[this.state.currErrors]}</p>\r\n                                 : null\r\n                        }\r\n                        <input className='btn' type='submit' value='Create your team' />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    team: state.team,\r\n});\r\n\r\nexport default connect(mapStateToProps, {createTeam})(CreateTeam);","/*\r\nModal that pops up when user attempts to join a team.\r\nAsks for secret number and if the user enters the correct\r\nsecret number, allows the user to join\r\n*/\r\n\r\nimport React, {useEffect} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport './css/MembersModal.css';\r\nimport './css/SettingsModal.css';\r\nimport './css/JoinTeamModal.css';\r\n\r\nclass JoinTeamModal extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            inputtedNum: '',\r\n            errors: -1,\r\n        }\r\n\r\n        this.possibErrors = ['Incorrect secret number'];\r\n\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleOutsideClick = this.handleOutsideClick.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.attemptJoin = this.attemptJoin.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // set event listener for checking if mouse click outside of modal\r\n        document.addEventListener('mousedown', this.handleOutsideClick);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //document.body.style.overflow = 'unset';\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    /*\r\n    set the wrapper ref for the modal so we can check if there\r\n    was a mouse click outside of the modal to close the modal\r\n    */\r\n    setWrapperRef(node){\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    /*\r\n    whenever click, checks if the click was inside or outside modal\r\n    */\r\n    handleOutsideClick(evt){\r\n        const {showModal, handleClose} = this.props;\r\n\r\n        // clicked outside of modal, so close modal\r\n        if (showModal && this.wrapperRef && !this.wrapperRef.contains(evt.target)) {\r\n            handleClose();\r\n        }\r\n    }\r\n\r\n    onChange(evt){\r\n        const name = evt.target.name;\r\n        this.setState({[name]: evt.target.value})\r\n    }\r\n\r\n    /*\r\n    attempt to join the org if the secret num is correct\r\n    */\r\n    attemptJoin(evt){\r\n        evt.preventDefault();\r\n\r\n        // clear any prev errors\r\n        this.setState({errors: -1});\r\n\r\n        const {currTeam, joinTeam} = this.props;\r\n        // entered the correct secret num, so let the user join\r\n        if (this.state.inputtedNum === currTeam.secretNum){\r\n            joinTeam(currTeam._id);\r\n            window.location.reload();\r\n        }\r\n        else{\r\n            this.setState({errors: 0})\r\n        }\r\n\r\n        // clear out the text input\r\n        this.setState({inputtedNum: ''});\r\n    }\r\n\r\n    render(){\r\n        const {showModal, currTeam} = this.props;\r\n        const showModalClass = showModal ? 'join-modal-container' : 'display-none';\r\n\r\n        // makes page immovable while modal open\r\n        if (showModal) document.body.style.overflow = 'hidden';\r\n        else document.body.style.overflow = 'unset';\r\n\r\n        return(\r\n            <div className={showModalClass} ref={this.setWrapperRef}>\r\n                <Card className='join-modal-main'>\r\n                    <h2 className='text-center'>{currTeam.teamName}'s secret number.</h2>\r\n                    <div className='input-secret'>\r\n                        <input type='text' name='inputtedNum' value={this.state.inputtedNum} \r\n                            onChange={this.onChange} className='search-input' /> \r\n                        <button className='btn' onClick={this.attemptJoin} >Join</button>\r\n                        {\r\n                            this.state.errors > -1 ?\r\n                                <p className='error-text'>{this.possibErrors[this.state.errors]}</p> \r\n                                : null\r\n                        }\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default JoinTeamModal;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {joinTeam, searchTeamWithPrompt} from '../../redux/actions/teamActions';\r\nimport { Link } from 'react-router-dom';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport JoinTeamModal from '../modals/JoinTeamModal';\r\n\r\nimport './css/TeamSearch.css';\r\n\r\nclass TeamSearch extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        // hasSearched is used to show the user if no teams match their prompt after they search\r\n        // (rather than showing it before they even search)\r\n        this.state = {\r\n            prompt: '',\r\n            hasSearched: false,\r\n            showModal: false,\r\n        }\r\n\r\n        this.searchForTeamWithPrompt = this.searchForTeamWithPrompt.bind(this);\r\n        this.joinTeam = this.joinTeam.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.isUserInTeam = this.isUserInTeam.bind(this);\r\n    }\r\n\r\n    showModal = () => {this.setState({showModal: true})}\r\n    hideModal = () => {this.setState({showModal: false})}\r\n\r\n    componentDidMount(){\r\n        // reset prompt\r\n        this.setState({prompt: ''})\r\n    }\r\n\r\n    // when user clicks join team button, calls the redux action to let the user join\r\n    joinTeam(teamData){\r\n        const userId = this.props.auth.user.id;\r\n        const userData = {\r\n            user: userId,\r\n            isAdmin: false,\r\n        }\r\n\r\n        // call the team action that joins a given user to a given team\r\n        this.props.joinTeam(userData, teamData);\r\n    }\r\n\r\n    onChange(evt){\r\n        const name = evt.target.name;\r\n        this.setState({[name]: evt.target.value})\r\n    }\r\n\r\n    searchForTeamWithPrompt(evt){\r\n        evt.preventDefault();\r\n        // call the team action to search for a team\r\n        const searchPrompt = this.state.prompt;\r\n        this.setState({hasSearched: true})\r\n        this.props.searchTeamWithPrompt(searchPrompt);\r\n    }\r\n\r\n    // checks if the user is in the teamMember list of this team\r\n    isUserInTeam(team){\r\n        // check if user is in the team\r\n        const {user} = this.props.auth;\r\n        const teamMembers = team.teamMembers;\r\n        let isInTeam = false;\r\n        for (let i = 0; i < teamMembers.length; i++){\r\n            if (teamMembers[i].user._id === user.id){\r\n                isInTeam = true;\r\n                break;\r\n            }\r\n        }\r\n        return isInTeam;\r\n    }\r\n\r\n    render(){\r\n        // can use searchTeamWithPrompt using this.props bc of redux\r\n        const {matchedTeams} = this.props.teams;\r\n\r\n        // create a list component that displays all of the teams that matched the prompt\r\n        const matchedTeamsList = matchedTeams.length > 0 ? \r\n                matchedTeams.map(matchedTeam => \r\n                    <div className=\"teamNames\" key={matchedTeam._id}>\r\n                        <Card className='searched-card'>\r\n                            <h1 className='team-name'>{matchedTeam.teamName}</h1>\r\n                            <h3>{matchedTeam.teamDescription.slice(0, 100)}</h3>\r\n                            {\r\n                                // only show join btn if user is not apart of team\r\n                                matchedTeam.teamMembers && matchedTeam.teamMembers.length > 0 \r\n                                    && this.isUserInTeam(matchedTeam) ?\r\n                                    <p className='join-btn'>You are already in this team.</p> :\r\n                                    <div className=\"members-container\">\r\n                                        <button id={matchedTeam._id} onClick={this.showModal} \r\n                                                className='join-btn btn'>\r\n                                            Join {matchedTeam.teamName}\r\n                                        </button>\r\n                                        <JoinTeamModal showModal={this.state.showModal} \r\n                                            handleClose={this.hideModal}\r\n                                            currTeam={matchedTeam}\r\n                                            joinTeam={this.joinTeam}/>\r\n                                    </div>\r\n                            }\r\n                        </Card>\r\n                    </div>\r\n                )\r\n            : null;\r\n\r\n        return(\r\n            <div className='search-container'>\r\n                <Link to='/'>Home</Link>\r\n                <div className='search-bar'>\r\n                    <form onSubmit={this.searchForTeamWithPrompt} className='search-bar'>\r\n                        <h1 className='search-prompt'>Type in a team name.</h1>\r\n                        <input type='text' name='prompt' value={this.state.prompt} onChange={this.onChange}\r\n                            className='search-input' />\r\n\r\n                        <input className='submit-btn btn' type='submit' value='Search' />\r\n                    </form>\r\n                    <div className='matched-teams'>\r\n                        {\r\n                            matchedTeams.length > 0 ? \r\n                                matchedTeamsList : \r\n                                this.state.hasSearched ? \r\n                                    <p className='no-match'>No teams matched your search 😢</p> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    teams: state.team,\r\n});\r\n\r\nexport default connect(mapStateToProps, {joinTeam, searchTeamWithPrompt})(TeamSearch);","import React from 'react';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport GradeIcon from '@material-ui/icons/Grade';\r\nimport GradeOutlinedIcon from '@material-ui/icons/GradeOutlined';\r\n\r\nimport './css/EditTeam.css';\r\n\r\nimport { editTeam } from '../../redux/actions/teamActions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass EditTeam extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            teamName: '',\r\n            teamDescription: '',\r\n            secretNum: '',\r\n            teamMembers: [],\r\n            updated: false,\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onEditTeam = this.onEditTeam.bind(this);\r\n        this.setAdmin = this.setAdmin.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.props.location)\r\n        const {currTeam} = this.props.location.state;\r\n        this.setState({\r\n            teamId: currTeam._id, \r\n            teamName: currTeam.teamName,\r\n            teamDescription: currTeam.teamDescription,\r\n            teamMembers: currTeam.teamMembers,\r\n            secretNum: currTeam.secretNum,\r\n        })\r\n    }\r\n\r\n    onChange(evt){\r\n        this.setState({[evt.target.name]: evt.target.value})\r\n    }\r\n\r\n    onEditTeam(evt){\r\n        evt.preventDefault();\r\n\r\n        // call redux action to edit the team\r\n        const teamData = this.state;\r\n\r\n        // go through team members and ensure that at least one is admin\r\n        const members = teamData.teamMembers;\r\n        let numAdmin = 0;\r\n        for (let i = 0; i < members.length; i++){\r\n            if (members[i].isAdmin){\r\n                numAdmin++;\r\n            }\r\n        }\r\n        // no admin, so don't let the user edit\r\n        if (numAdmin === 0){\r\n            alert(\"You must have at least one admin\");\r\n            return;\r\n        }\r\n\r\n        this.props.editTeam(teamData);\r\n        this.setState({updated: true});\r\n    }\r\n\r\n    setAdmin(evt, isAdmin, member){\r\n        evt.preventDefault();\r\n\r\n        let tempMembers = this.state.teamMembers;\r\n        // if is admin, then need to change to not admin & vice versa\r\n        for (let i = 0; i < tempMembers.length; i++){\r\n            if (tempMembers[i].user._id === member.user._id){\r\n                // change isadmin\r\n                tempMembers[i].isAdmin = !isAdmin;\r\n                break;\r\n            }\r\n        }\r\n      \r\n        this.setState({teamMembers: tempMembers});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='edit-team-container'>\r\n                <div className='back-title'>\r\n                    <ArrowBackIosIcon fontSize='large' className='edit-back' \r\n                        onClick={() => this.props.history.goBack()} />\r\n                \r\n                    <h1 className='edit-team-title'>Change up your team.</h1>\r\n                </div>\r\n                   \r\n                <Grid container spacing={2} className='edit-separator'>\r\n                    <Grid item md={10} sm={12} className='edit-team-container edit-items'>\r\n                        <label className='input-label'>Name</label>\r\n                        <input className='edit-search-input' type='text' name='teamName'\r\n                            onChange={this.onChange} value={this.state.teamName} />\r\n                        <label className='input-label'>Description</label>\r\n                        <input className='edit-search-input' type='text' name='teamDescription'\r\n                            onChange={this.onChange} value={this.state.teamDescription} />\r\n                        <label className='input-label'>Secret Number</label>\r\n                        <input className='edit-search-input' type='text' name='secretNum'\r\n                            onChange={this.onChange} value={this.state.secretNum} />\r\n                    </Grid>\r\n                    <Grid item md={2} xs={12} className='members-edit-list'>\r\n                        <label className='input-label'>Members</label>\r\n                        {\r\n                            // team members edit\r\n                            this.state.teamMembers && this.state.teamMembers.length > 0 ? this.state.teamMembers.map(member =>\r\n                                <div className='edit-member-admin'>\r\n                                    {\r\n                                        member.isAdmin ? \r\n                                            <GradeIcon id='is-admin' className='admin color-blue scale-hover' fontSize='small' \r\n                                                onClick={evt => this.setAdmin(evt, true, member)}/> : \r\n                                            <GradeOutlinedIcon id='not-admin' className='admin color-blue scale-hover' \r\n                                                fontSize='small' onClick={evt => this.setAdmin(evt, false, member)}/>\r\n                                    }\r\n                                    <p>{member.user.firstName + ' ' + member.user.lastName}</p>   \r\n                                </div> \r\n                            ) : null\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n                {\r\n                    this.state.updated ? <p>Your team has been updated.</p> : null\r\n                }\r\n                <button className='btn edit-team-btn' onClick={this.onEditTeam}>Submit</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, {editTeam})(EditTeam);","import React from 'react';\r\nimport Card from '@material-ui/core/Card'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport OfflinePinIcon from '@material-ui/icons/OfflinePin';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport './css/HomeNotesList.css';\r\n\r\nimport {deleteNote} from '../../redux/actions/noteActions';\r\n\r\n// for right click context menu to delete\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport { connect } from 'react-redux';\r\n\r\nclass HomeNotesList extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.onContextItemClick = this.onContextItemClick.bind(this);\r\n    }\r\n\r\n    onContextItemClick(evt, data){\r\n        evt.preventDefault();\r\n        // data holds the note that was right clicked\r\n        const teamData = this.props.currTeam;\r\n        this.props.deleteNote(data.noteData, teamData);\r\n        // reload page to show deletions\r\n        window.location.reload();\r\n    }\r\n\r\n    render(){\r\n        const currTeam = this.props.currTeam;\r\n\r\n        // get all of the pinned notes for this curr team and make a component\r\n        const notesList = currTeam.teamNotes && currTeam.teamNotes.length > 0 ?\r\n            currTeam.teamNotes.map(note => {\r\n                // get updated at for each note to show time last updated\r\n                const lastUpdated = new Date(note.updatedAt);\r\n                return note.pinned ? \r\n                    <div key={note._id}>\r\n                        <ContextMenuTrigger id={note._id}>\r\n                            <Link to={{pathname:`/noteslist/${currTeam._id}`, state:{currNote: note}}}\r\n                                className='show-note'>\r\n                                <Card className='home-note-content' onContextMenu={this.rightClickNote}>\r\n                                    <Grid container spacing={1}>\r\n                                        <Grid item xs={10}>\r\n                                            <p className='note-details'>Last updated: {lastUpdated.toLocaleString()}</p>\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <OfflinePinIcon className='pinned-btn'/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <h6 className='home-note-title'>{note.noteTitle}</h6>\r\n                                    <p>{note.noteBody.slice(0, 110)}</p>\r\n                                    <p className='note-details note-author'>By, {note.author}</p>\r\n                                    {\r\n                                        // show all note tags\r\n                                        note.tags && note.tags.length > 0 ? note.tags.map(tag =>\r\n                                            <div id={tag._id} key={tag._id} className=\"sm-tag-container\" style={{backgroundColor: tag.color}} onClick={this.deleteTag}>\r\n                                                <p id={tag._id}>{tag.title}</p>   \r\n                                            </div>\r\n                                        ) : null\r\n                                    }\r\n                                </Card>\r\n                            </Link>\r\n                        </ContextMenuTrigger>\r\n\r\n                        <ContextMenu id={note._id} className='context-menu-container'>\r\n                            <MenuItem className='context-menu-item' data={{noteData: note}} \r\n                                onClick={this.onContextItemClick}>\r\n                                Delete\r\n                            </MenuItem>\r\n                        </ContextMenu>\r\n                    </div>\r\n                : null\r\n            }) : <p>No notes yet!</p>;\r\n\r\n            return notesList;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    note: state.note\r\n})\r\n\r\nexport default connect(mapStateToProps, {deleteNote})(HomeNotesList);","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport {Link} from 'react-router-dom';\r\nimport Card from '@material-ui/core/Card'\r\nimport {completeTeamTodo, deleteTeamTodo} from '../../redux/actions/teamActions';\r\n\r\n// for right click context menu to delete\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\nimport './css/HomeTodoList.css';\r\nimport { connect } from 'react-redux';\r\n\r\n// <Link className='edit-todo' to={{pathname: '/edittodo', state:{teamData: currTeam, currTodo: todo}}}>\r\nclass HomeTodoList extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.onContextItemClick = this.onContextItemClick.bind(this);\r\n        this.onToggle = this.onToggle.bind(this);\r\n    }\r\n\r\n    onContextItemClick(evt, data){\r\n        evt.preventDefault();\r\n        const {todoData} = data;\r\n        const {currTeam} = this.props;\r\n\r\n        if (data.type === 'delete'){\r\n            // delete the todo\r\n            this.props.deleteTeamTodo(currTeam, todoData);\r\n        }\r\n        else if (data.type === 'edit'){\r\n            // take the user to edit todo with the todo's info\r\n            this.props.history.push({\r\n                pathname:'/edittodo',\r\n                state: {teamData: currTeam, currTodo: todoData}\r\n            });\r\n        }\r\n    }\r\n\r\n    onToggle(evt){\r\n        console.log(evt.target.id, evt.target.value);\r\n\r\n        const todoData = {\r\n            id: evt.target.id,\r\n        }\r\n        const {currTeam} = this.props;\r\n\r\n        // toggle the todo with this action dispatch\r\n        this.props.completeTeamTodo(currTeam, todoData);\r\n    }\r\n\r\n    render(){\r\n        const {currTeam} = this.props;\r\n        console.log(currTeam);\r\n        // get all of the todos for this curr team and make component\r\n        const todosList = currTeam.teamTodos && currTeam.teamTodos.length > 0 ?\r\n            currTeam.teamTodos.map(todo => \r\n                <div key={todo._id}>\r\n                    <ContextMenuTrigger id={todo._id}>\r\n                        <Card className='todo-container' key={todo._id}>\r\n                            <Form>\r\n                                <Form.Check \r\n                                    custom\r\n                                    className='todo-check-form'\r\n                                    type='checkbox'\r\n                                    id={todo._id}\r\n                                    label={todo.todoText}\r\n                                    checked={todo.isCompleted}\r\n                                    onChange={this.onToggle}/>\r\n                            </Form>\r\n                            <p>Assigned: \r\n                                {\r\n                                    todo.assignee && todo.assignee.length > 0 ? ' ' + todo.assignee : 'None'\r\n                                }\r\n                            </p>\r\n                            {\r\n                                // show all todo tags\r\n                                todo.tags && todo.tags.length > 0 ? todo.tags.map(tag =>\r\n                                    <div id={tag._id} key={tag._id} className=\"sm-tag-container todo-tag\" style={{backgroundColor: tag.color}} onClick={this.deleteTag}>\r\n                                        <p id={tag._id}>{tag.title}</p>   \r\n                                    </div>\r\n                                ) : null\r\n                            }\r\n                        </Card>\r\n                    </ContextMenuTrigger>\r\n\r\n                    <ContextMenu id={todo._id} className='context-menu-container'>\r\n                        <MenuItem id='edit' className='context-menu-item' data={{todoData: todo, type:'edit'}} \r\n                            onClick={this.onContextItemClick}>\r\n                            Edit\r\n                        </MenuItem>\r\n                        <MenuItem id='delete' className='context-menu-item' data={{todoData: todo, type:'delete'}} \r\n                            onClick={this.onContextItemClick}>\r\n                            Delete\r\n                        </MenuItem>\r\n                    </ContextMenu>\r\n                </div>\r\n            ) : <p>No todos yet!</p>;\r\n        return todosList;\r\n    }\r\n}\r\n\r\nexport default connect(null, {deleteTeamTodo, completeTeamTodo})(HomeTodoList);","import React from 'react';\r\nimport Card from '@material-ui/core/Card'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// for right click context menu to delete\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\nimport './css/HomeEventsList.css';\r\n\r\nclass HomeEventsList extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.onContextItemClick = this.onContextItemClick.bind(this);\r\n    }\r\n\r\n    sortFutureEvents(eventsList){\r\n        eventsList.sort((a, b) => {\r\n            a = new Date(a.eventStartTime);\r\n            b = new Date(b.eventStartTime);\r\n            return a < b ? -1 : a > b ? 1 : 0\r\n        })\r\n        return eventsList;\r\n    }\r\n\r\n    onContextItemClick(evt, data){\r\n        evt.preventDefault();\r\n        const {eventData} = data;\r\n        const {currTeam} = this.props.team;\r\n        this.props.deleteEvent(eventData, currTeam);\r\n        // reload page to show deletions\r\n        window.location.reload();\r\n    }\r\n\r\n    render(){\r\n        const {currTeam} = this.props;\r\n\r\n        // get all events for this curr team and make component\r\n        let numPastEvents = 0;\r\n        const sortedEvents = currTeam.teamEvents ? this.sortFutureEvents(currTeam.teamEvents)\r\n                : currTeam.teamEvents;\r\n        const eventsList = sortedEvents && sortedEvents.length > 0 ?\r\n                sortedEvents.map(event => {\r\n                    const start = new Date(event.eventStartTime);\r\n                    const end = new Date(event.eventEndTime);\r\n                    // don't show events that have already passed\r\n                    const currTime = new Date();\r\n\r\n                    if (currTime < start){\r\n                        return(\r\n                            <div key={event._id}>\r\n                                <ContextMenuTrigger id={event._id}>\r\n                                    <Link className='link-to-edit'\r\n                                            to={{pathname:'/editevent', state:{event}}}>\r\n                                        <Card className='event-card'>\r\n                                            <h4 className='event-title color-blue'>{event.eventTitle}</h4>\r\n                                            <p>{event.eventDescription.slice(0, 100)}</p>\r\n                                            <div className='event-details'>\r\n                                            <Grid container spacing={2}>\r\n                                                <Grid item xs={2}>\r\n                                                    <LocationOnIcon className='location-icon color-blue'/>\r\n                                                </Grid>\r\n                                                <Grid item xs={10}>\r\n                                                    <p>{event.eventLocation}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <p>Start: {start.toLocaleString()}</p>\r\n                                            <p>End: {end.toLocaleString()}</p>\r\n                                        </div>\r\n                                        </Card>\r\n                                    </Link>\r\n                                </ContextMenuTrigger>\r\n                                <ContextMenu id={event._id} className='context-menu-container'>\r\n                                    <MenuItem className='context-menu-item' data={{eventData: event}} \r\n                                        onClick={this.onContextItemClick}>\r\n                                        Delete\r\n                                    </MenuItem>\r\n                                </ContextMenu>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    else{ \r\n                        // if a past event, keep count of how many\r\n                        numPastEvents++;\r\n                        return null;\r\n                     }\r\n                }) : <p>No events yet!</p>\r\n        \r\n        return (\r\n            <div className='home-events'>\r\n                <div className='all-events-container center-cards'>\r\n                    {eventsList}\r\n                </div>\r\n                <p className='past-events-text'>You have {numPastEvents} past event(s).</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomeEventsList;","import React, {useEffect} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport './css/MembersModal.css';\r\n\r\n// for right click context menu to delete\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\nclass MembersModal extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleOutsideClick = this.handleOutsideClick.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // set event listener for checking if mouse click outside of modal\r\n        document.addEventListener('mousedown', this.handleOutsideClick);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //document.body.style.overflow = 'unset';\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    /*\r\n    set the wrapper ref for the modal so we can check if there\r\n    was a mouse click outside of the modal to close the modal\r\n    */\r\n    setWrapperRef(node){\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    /*\r\n    whenever click, checks if the click was inside or outside modal\r\n    */\r\n    handleOutsideClick(evt){\r\n        const {showModal, handleClose} = this.props;\r\n\r\n        // clicked outside of modal, so close modal\r\n        if (showModal && this.wrapperRef && !this.wrapperRef.contains(evt.target)) {\r\n            handleClose();\r\n        }\r\n    }\r\n\r\n    /*\r\n    Handles when a context item (right clicking on a user) is clicked\r\n    */\r\n    onContextItemClick(evt, data){\r\n        evt.preventDefault();\r\n        console.log(data)\r\n    }\r\n\r\n    render(){\r\n        const {showModal, handleClose, members} = this.props;\r\n        const showModalClass = showModal ? 'member-modal-container' : 'display-none';\r\n\r\n        // makes page immovable while modal open\r\n        if (showModal) document.body.style.overflow = 'hidden';\r\n        else document.body.style.overflow = 'unset';\r\n\r\n        const memberContext = (member) => (\r\n            <div key={member.user._id}>\r\n                <ContextMenuTrigger id={member.user._id}>\r\n                    {\r\n                        member.isAdmin ? \r\n                            <p key={member.user._id} className='member-name admin'>\r\n                                {member.user.firstName + ' ' + member.user.lastName} (Admin)\r\n                            </p> :\r\n                            <p key={member.user._id} className='member-name'>\r\n                                {member.user.firstName + ' ' + member.user.lastName}\r\n                            </p>\r\n                    }\r\n                </ContextMenuTrigger>\r\n\r\n                <ContextMenu id={member.user._id} className='memb-context-menu'>\r\n                    <MenuItem className='context-menu-item' data={{userData: member}} \r\n                        onClick={this.onContextItemClick}>\r\n                        Make Admin\r\n                    </MenuItem>\r\n                </ContextMenu>\r\n            </div>\r\n        )\r\n\r\n        return(\r\n            <div className={showModalClass} ref={this.setWrapperRef}>\r\n                <Card className='modal-main'>\r\n                    <p className='member-title'>Members</p>\r\n                    {\r\n                        members && members.length > 0 ? members.map(member => \r\n                            memberContext(member)      \r\n                        ) : null\r\n                    }\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MembersModal;","import React, {useEffect} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport './css/MembersModal.css';\r\nimport './css/SettingsModal.css';\r\nimport './css/TeamSettingsModal.css';\r\n\r\nconst SECRET_KEY_TEXT = 'Secret Key';\r\n\r\nclass TeamSettingsModal extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            secretNumText: SECRET_KEY_TEXT\r\n        }\r\n\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleOutsideClick = this.handleOutsideClick.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // set event listener for checking if mouse click outside of modal\r\n        document.addEventListener('mousedown', this.handleOutsideClick);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //document.body.style.overflow = 'unset';\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    /*\r\n    set the wrapper ref for the modal so we can check if there\r\n    was a mouse click outside of the modal to close the modal\r\n    */\r\n    setWrapperRef(node){\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    /*\r\n    whenever click, checks if the click was inside or outside modal\r\n    */\r\n    handleOutsideClick(evt){\r\n        const {showModal, handleClose} = this.props;\r\n\r\n        // clicked outside of modal, so close modal\r\n        if (showModal && this.wrapperRef && !this.wrapperRef.contains(evt.target)) {\r\n            handleClose();\r\n        }\r\n    }\r\n\r\n    onClick(evt){\r\n        evt.preventDefault();\r\n\r\n        const {currTeam} = this.props;\r\n        // if user wants to view secret number\r\n        if (evt.target.id === 'sk'){\r\n            // show the user the secret number\r\n            if (this.state.secretNumText === SECRET_KEY_TEXT){\r\n                this.setState({secretNumText: currTeam.secretNum})\r\n            }\r\n            else this.setState({secretNumText: SECRET_KEY_TEXT});\r\n        }\r\n        // if the user wants to edit the team\r\n        else if (evt.target.id === 'et'){\r\n            // bring user to edit team page with the curr team's data\r\n            this.props.history.push({\r\n                pathname:'/editteam',\r\n                state: {currTeam: currTeam}\r\n            })\r\n        }\r\n        // if user wants to view/edit tags\r\n        else if (evt.target.id === 'tags'){\r\n            this.props.history.push({\r\n                pathname:'/tags',\r\n                state: {currTeam: currTeam}\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {showModal, children} = this.props;\r\n        const showModalClass = showModal ? 'member-modal-container' : 'display-none';\r\n\r\n        // makes page immovable while modal open\r\n        if (showModal) document.body.style.overflow = 'hidden';\r\n        else document.body.style.overflow = 'unset';\r\n\r\n        return(\r\n            <div className={showModalClass} ref={this.setWrapperRef}>\r\n                <Card className='team-set-modal-main'>\r\n                    <p className='member-title'>Team Settings</p>\r\n                    {\r\n                        children && children.length > 0 ? children.map(child => \r\n                            <p id={child.id} key={child.id} className='member-name child-name'\r\n                                onClick={this.onClick}>\r\n                                    {\r\n                                        child.id === 'sk' ?\r\n                                            this.state.secretNumText : child.text\r\n                                    }\r\n                            </p>\r\n                        ) : null\r\n                    }\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(TeamSettingsModal);","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport MembersModal from '../modals/MembersModal';\r\nimport TeamSettingsModal from '../modals/TeamSettingsModal';\r\n\r\nimport './css/TeamHeader.css';\r\nimport { connect } from 'react-redux';\r\n\r\nclass TeamHeader extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            showMembersModal: false,\r\n            showTeamSettingsModal: false,\r\n            teamSettings:[{id:'sk', text:'Secret Key'}, {id:'et', text:'Edit Team'}, {id:'tags', text:'View Tags'}]\r\n        }\r\n        this.showMembersModal = this.showMembersModal.bind(this);\r\n        this.hideMembersModal = this.hideMembersModal.bind(this);\r\n        this.hideTeamSettingsModal = this.hideTeamSettingsModal.bind(this);\r\n        this.showTeamSettingsModal = this.showTeamSettingsModal.bind(this);\r\n        this.isUserInTeam = this.isUserInTeam.bind(this);\r\n    }\r\n\r\n    showMembersModal = () => {this.setState({showMembersModal: true})}\r\n\r\n    showTeamSettingsModal = () => {this.setState({showTeamSettingsModal: true})}\r\n\r\n    hideMembersModal = () => {this.setState({showMembersModal: false})}\r\n\r\n    hideTeamSettingsModal = () => {this.setState({showTeamSettingsModal: false})}\r\n\r\n    /*\r\n    checks if the user is in the teamMember list of this team\r\n    Used when creating the dropdown menu of teams the user is in\r\n    */\r\n    isUserInTeam(team){\r\n        // check if user is in the team\r\n        const {user} = this.props.auth;\r\n        const teamMembers = team.teamMembers;\r\n        let isInTeam = false;\r\n        for (let i = 0; i < teamMembers.length; i++){\r\n            if (teamMembers[i].user._id === user.id){\r\n                isInTeam = true;\r\n                break;\r\n            }\r\n        }\r\n        return isInTeam;\r\n    }\r\n\r\n    /*\r\n    Given a team and a user, find if the user is an admin in that team\r\n    */\r\n   findIfAdmin(team, user){\r\n        const members = team.teamMembers;\r\n        for (let i = 0; i < members.length; i++){\r\n            if (members[i].user._id === user.id){\r\n                return members[i].isAdmin;\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {currTeam} = this.props;\r\n        const {currUser} = this.props;\r\n        const isAdmin = currTeam.teamMembers ? this.findIfAdmin(currTeam, currUser) : false;\r\n        // have all dropdown items be teams user is in\r\n        const {teamsList} = this.props.team;\r\n\r\n        const teamDropdownItems = teamsList && teamsList.length > 0 ?\r\n            teamsList.map(team => {\r\n                // need to check if the user is in a certain team or not\r\n                const userIsInTeam = this.isUserInTeam(team);\r\n\r\n                // if the user is in the team, show it and if not don't show the team\r\n                return (userIsInTeam ? \r\n                        <Dropdown.Item key={team._id}>\r\n                            <Link to={{\r\n                                pathname: `/team/${team._id}`, \r\n                                state: {teamId: team._id}\r\n                            }}>{team.teamName}</Link>\r\n                        </Dropdown.Item>\r\n                    : null)\r\n                \r\n            }) : null;\r\n\r\n        return(\r\n            <div className='team-header-container'>\r\n                <Link to='/' className='home-btn'>Home</Link>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={10}>\r\n                        <Dropdown className=\"dropdown\">\r\n                            <Dropdown.Toggle variant='primary' id='team-selector' className='team-name-title'>\r\n                                {\r\n                                    // decide if the user is on a team or if the user hasn't selected a team yet\r\n                                    this.props.team.teamsList.length > 0 ? this.props.team.currTeam.teamName : \"Select Team\"\r\n                                }\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                {teamDropdownItems}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <h4 className='team-desc'>{currTeam.teamDescription}</h4>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <div className='members-chat'>\r\n                            <div className=\"members-container\">\r\n                                <PeopleAltIcon className='members-icon scale-hover color-blue' \r\n                                    onClick={this.showMembersModal} fontSize='large'/>\r\n                                <MembersModal showModal={this.state.showMembersModal} \r\n                                    handleClose={this.hideMembersModal}\r\n                                    members={currTeam.teamMembers} />\r\n                            </div>\r\n                            <Link to={{pathname:'/chat', state:{currTeam}}}>\r\n                                <ChatIcon className='chat-icon scale-hover color-blue' fontSize='large'/>\r\n                            </Link>\r\n                            {\r\n                                // if user is admin, then show the team options menu\r\n                                isAdmin ? \r\n                                    <div className='team-options-container'>\r\n                                        <MoreVertIcon className='options-icon scale-hover color-blue' \r\n                                            fontSize='large' onClick={this.showTeamSettingsModal}/>\r\n                                        <TeamSettingsModal showModal={this.state.showTeamSettingsModal} \r\n                                            handleClose={this.hideTeamSettingsModal}\r\n                                            currTeam={currTeam}\r\n                                            children={this.state.teamSettings} />\r\n                                    </div> : null\r\n                            }\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    team: state.team,\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(TeamHeader);","import React from \"react\";\r\nimport Card from '@material-ui/core/Card'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport OfflinePinIcon from '@material-ui/icons/OfflinePin';\r\nimport {Link} from 'react-router-dom';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport \"./css/Team.css\";\r\n\r\nclass SearchResults extends React.Component{\r\n    findNotesWithTag = (notesList, search) => {\r\n        let notesWithTag = [];\r\n        for (let i = 0; i < notesList.length; i++){\r\n            // go through tags for this note\r\n            if (notesList[i] && notesList[i].tags){\r\n                for (let j = 0; j < notesList[i].tags.length; j++){\r\n                    // if search result is contained in the tag, then this note is a result\r\n                    if (notesList[i].tags[j].title.includes(search)){\r\n                        notesWithTag.push(notesList[i]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return notesWithTag;\r\n    }\r\n\r\n    findTodosWithTag = (todosList, search) => {\r\n        let todosWithTag = [];\r\n        for (let i = 0; i < todosList.length; i++){\r\n            // go through tags for this note\r\n            if (todosList[i] && todosList[i].tags){\r\n                for (let j = 0; j < todosList[i].tags.length; j++){\r\n                    // if search result is contained in the tag, then this note is a result\r\n                    if (todosList[i].tags[j].title.includes(search)){\r\n                        todosWithTag.push(todosList[i]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return todosWithTag;\r\n    }\r\n\r\n    render(){\r\n        const {currTeam, search} = this.props;\r\n        // search for notes with a given tag searched\r\n        const notesWithTag = this.findNotesWithTag(currTeam.teamNotes, search);\r\n        const todosWithTag = this.findTodosWithTag(currTeam.teamTodos, search);\r\n\r\n        const searchedNotesComponent =  notesWithTag && notesWithTag.length > 0 ? notesWithTag.map(note => {\r\n            // get updated at for each note to show time last updated\r\n            const lastUpdated = new Date(note.updatedAt);\r\n            return(\r\n                <Link to={{pathname:`/noteslist/${currTeam._id}`, state:{currNote: note}}}\r\n                    className='show-note' key={note._id}>\r\n                    <Card className='home-note-content with-tag'>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={10}>\r\n                                <p className='note-details'>Last updated: {lastUpdated.toLocaleString()}</p>\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <OfflinePinIcon className='pinned-btn'/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <h6 className='home-note-title'>{note.noteTitle}</h6>\r\n                        <p>{note.noteBody.slice(0, 110)}</p>\r\n                        <p className='note-details note-author'>By, {note.author}</p>\r\n                        {\r\n                            // show all note tags\r\n                            note.tags && note.tags.length > 0 ? note.tags.map(tag =>\r\n                                <div id={tag._id} key={tag._id} className=\"sm-tag-container\" style={{backgroundColor: tag.color}} onClick={this.deleteTag}>\r\n                                    <p id={tag._id}>{tag.title}</p>   \r\n                                </div>\r\n                            ) : null\r\n                        }\r\n                    </Card>\r\n                </Link>\r\n            )\r\n        }) : <p>No notes with this tag.</p>;\r\n\r\n        const searchedTodosComponent = todosWithTag && todosWithTag.length > 0 ? todosWithTag.map(todo => \r\n            <div className=\"with-tag\" key={todo._id}>\r\n                <Card className='todo-container' key={todo._id}>\r\n                    <Form>\r\n                        <Form.Check \r\n                            custom\r\n                            className='todo-check-form'\r\n                            type='checkbox'\r\n                            id={todo._id}\r\n                            label={todo.todoText}\r\n                            checked={todo.isCompleted}\r\n                            onChange={this.onToggle}/>\r\n                    </Form>\r\n                    <p>Assigned: \r\n                        {\r\n                            todo.assignee && todo.assignee.length > 0 ? ' ' + todo.assignee : 'None'\r\n                        }\r\n                    </p>\r\n                    {\r\n                        // show all todo tags\r\n                        todo.tags && todo.tags.length > 0 ? todo.tags.map(tag =>\r\n                            <div id={tag._id} key={tag._id} className=\"sm-tag-container todo-tag\" style={{backgroundColor: tag.color}} onClick={this.deleteTag}>\r\n                                <p id={tag._id}>{tag.title}</p>   \r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                </Card>\r\n            </div>\r\n        ) : <p>No todos with this tag.</p>\r\n\r\n        return(\r\n            <div className=\"search-result-container\">\r\n                <div className=\"with-tag\">\r\n                    {searchedNotesComponent}\r\n                </div>\r\n                <div className=\"with-tag\">\r\n                    {searchedTodosComponent}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport HomeNotesList from '../notes/HomeNotesList';\r\nimport HomeTodoList from '../todos/HomeTodoList';\r\nimport HomeEventsList from '../events/HomeEventsList';\r\nimport TeamHeader from './TeamHeader';\r\nimport SearchResults from \"./SearchResults\";\r\n\r\nimport './css/Team.css';\r\n\r\nimport {getTeamWithId, getAllTeams, completeTeamTodo, deleteTeamTodo} from '../../redux/actions/teamActions';\r\n\r\n/*\r\nDepends on the id of the team passed in, shows the team with that id\r\n*/\r\nclass Team extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            search:\"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // get the id of the team and call the action to get the specific team\r\n        const {id} = this.props.match.params;\r\n        // get the team that the user is viewing\r\n        this.props.getTeamWithId(id);\r\n        // get all teams to display in the dropdown\r\n        this.props.getAllTeams();\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        // check if user selected new team in dropdown. if so, reload page to go to new team\r\n        const newTeamId = this.props.location.state ? \r\n            this.props.location.state.teamId : '';\r\n        const currTeamId = prevProps.team.currTeam._id ?\r\n            prevProps.team.currTeam._id : '';\r\n\r\n        // if the new team that the user wants to view is not the same team that's on screen, refresh\r\n        if (newTeamId !== '' && currTeamId !== '' && newTeamId !== currTeamId){\r\n            window.location.reload();\r\n        }    \r\n\r\n        // if added a note, then should refresh to show new note\r\n        if (this.props.note.lastAddedNote !== prevProps.note.lastAddedNote){\r\n            window.location.reload();\r\n        }\r\n\r\n        // if added a todo, should refresh to show new todo\r\n        if (this.props.team.lastAddedTodo !== prevProps.team.lastAddedTodo){\r\n            window.location.reload();\r\n        }\r\n\r\n        // if added an event, should refresh to show new event\r\n        if (this.props.event.lastAddedEvent !== prevProps.event.lastAddedEvent){\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    onChange = evt => {\r\n        this.setState({search: evt.target.value})\r\n    }\r\n\r\n    render(){\r\n        // get the curr team from props that was obtained from store state after getTeamWithId called\r\n        const {currTeam} = this.props.team;\r\n        // get the curr user of the app\r\n        const {user} = this.props.auth;        \r\n\r\n        // the search bar\r\n        const search = \r\n        <div>\r\n            <input className=\"search\" onChange={this.onChange} value={this.state.search} placeholder=\"Search for something...\"></input>\r\n        </div>\r\n\r\n        return(\r\n            <div className=\"team-container\">\r\n                <div className=\"teamNames\" key={currTeam._id}>\r\n                    <TeamHeader currTeam={currTeam} currUser={user}/>\r\n\r\n                    {search}\r\n\r\n                    {\r\n                        // if the user is searching for something, show the search results. if not, show regular view\r\n                        this.state.search && this.state.search.trim().length > 0 ? <SearchResults search={this.state.search} currTeam={currTeam}/> :\r\n                            <React.Fragment>\r\n                                <div className=\"team-notes-list h-team-list\">\r\n                                    {/*<Link className='list-title' to={`/noteslist/${currTeam._id}`}>Notes</Link>*/}\r\n                                    <Link className='list-title' to={`/team/${currTeam._id}/notes`}>Notes</Link>\r\n                                    <div className='h-notes-list-container'>\r\n                                        <HomeNotesList currTeam={currTeam} />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item sm={12} md={5} className='grid-todos'>\r\n                                        <div className=\"team-todos-list h-team-list\">\r\n                                            <Grid container spacing={2}>\r\n                                                <Grid item xs={9}>\r\n                                                    <h2 className='list-title h-todo-list'>Todos</h2>\r\n                                                </Grid>\r\n                                                <Grid item xs={1}>\r\n                                                    <Link to={{pathname: '/addtodo', state:{teamData: currTeam}}}>\r\n                                                        <AddIcon fontSize='large' className='add-icon todo-add' />\r\n                                                    </Link>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <div className='h-todos-container'>\r\n                                                <HomeTodoList currTeam={currTeam} history={this.props.history}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item sm={12} md={7}>\r\n                                        <div className=\"team-events-list\">\r\n                                            <div>\r\n                                                <Grid container spacing={2}>\r\n                                                    <Grid item xs={9}>\r\n                                                        <h4>\r\n                                                            <Link className='list-title h-event-list' to={`/eventslist/${currTeam._id}`}>\r\n                                                                Events\r\n                                                            </Link>\r\n                                                        </h4>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={1}>\r\n                                                        <Link to={{pathname: '/addevent', state:{teamData: currTeam}}}>\r\n                                                            <AddIcon fontSize='large' className='add-icon event-add' />\r\n                                                        </Link>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </div>\r\n                                            <HomeEventsList currTeam={currTeam} />\r\n                                        </div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </React.Fragment>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    team: state.team,\r\n    note: state.note,\r\n    event: state.event,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getTeamWithId, getAllTeams, completeTeamTodo,\r\n        deleteTeamTodo})(Team);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {addTodoToTeam} from '../../redux/actions/teamActions';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport AddTag from \"../tags/AddTag\";\r\n\r\nimport './css/AddTodo.css';\r\n\r\nclass AddTodo extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todoText: '',\r\n            assignee: '',\r\n            tags: [],\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmitTodo = this.onSubmitTodo.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // if came from a message, then set the body to the message\r\n        if (this.props.location.state){\r\n            this.setState({\r\n                todoText: this.props.location.state.todoText\r\n            })\r\n        }\r\n    }\r\n\r\n    onChange(evt){\r\n        this.setState({todoText: evt.target.value});\r\n    }\r\n\r\n    deleteTag = evt => {\r\n        // find tag with the id in list of tags\r\n        const {id} = evt.target;\r\n\r\n        this.setState(prevState => {\r\n            const {tags} = prevState;\r\n\r\n            for (let i = 0; i < tags.length; i++){\r\n                // remove the tag\r\n                if (tags[i]._id === id){\r\n                    console.log(tags[i])\r\n                    tags.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            return {tags};\r\n        });\r\n    }\r\n\r\n    onSubmitTodo(evt){\r\n        evt.preventDefault();\r\n\r\n        const {teamData} = this.props.location.state;\r\n        const {user} = this.props.auth;\r\n        const todoData = {\r\n            todoText: this.state.todoText,\r\n            isCompleted: false,\r\n            assignee: this.state.assignee,\r\n            tags: this.state.tags,\r\n            author: user.firstName + ' ' + user.lastName,\r\n        }\r\n\r\n        // add todo to team and redirect back to the team home\r\n        this.props.addTodoToTeam(teamData, todoData);\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    addTag = evt => {\r\n        evt.preventDefault();\r\n        // get the tag then put into array of tags\r\n        const tag = document.getElementById(\"select-tag\").value;        \r\n\r\n        // check if tag is already added and make sure no more than 3 tags are added\r\n        const {tags} = this.state;\r\n        if (tags.length >= 3){\r\n            alert(\"You can only add up to 3 tags\");\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < tags.length; i++){\r\n            if (tags[i].title === tag){\r\n                alert(\"You already added this tag\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        // get current team\r\n        const currTeam = this.props.location.state.teamData;\r\n        const {teamTags} = currTeam;\r\n        let selTag = {}\r\n        for (let i = 0; i < teamTags.length; i++){\r\n            if (teamTags[i].title === tag){\r\n                selTag = teamTags[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.setState(prevState => {\r\n             // add newly typed tag to tag list\r\n             const tags = prevState.tags.concat(selTag);\r\n             return {tags}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        // get current team\r\n        const {teamData} = this.props.location.state;\r\n        const membersList = teamData.teamMembers;\r\n        const {tags} = this.state;\r\n        console.log(teamData);\r\n\r\n        // dropdown of all members in curr team to choose an assignee\r\n        const memberDropdownItems = membersList && membersList.length > 0 ?\r\n            membersList.map(member => \r\n                <Dropdown.Item key={member._id}\r\n                    onClick={() => this.setState({assignee: `${member.user.firstName} ${member.user.lastName}`})}>\r\n                    {member.user.firstName + ' ' + member.user.lastName}\r\n                </Dropdown.Item> \r\n            ) : null;\r\n\r\n        return(\r\n            <div className='edit-todo-container'>\r\n                <h1 className='edit-todo-title'>What do you want to accomplish?</h1>\r\n                <form className='edit-todo-form'>\r\n                    <input className='todo-input' name='todoText' type='text' \r\n                        onChange={this.onChange} value={this.state.todoText} />\r\n\r\n                    <Dropdown className='assign-dropdown'>\r\n                        <Dropdown.Toggle id='team-selector'>\r\n                            {\r\n                                // decide if the user is on a team or if the user hasn't selected a team yet\r\n                                this.state.assignee.length > 0 ? this.state.assignee : \"None\"\r\n                            }\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item onClick={() => this.setState({assignee: ''})}>\r\n                                None\r\n                            </Dropdown.Item>\r\n                            {memberDropdownItems}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <AddTag tags={tags} addTag={this.addTag} deleteTag={this.deleteTag} currTeam={teamData}/>\r\n                </form>\r\n                <button className='submit-btn btn' onClick={this.onSubmitTodo}>Submit</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    team: state.team,\r\n})\r\n\r\nexport default connect(mapStateToProps, {addTodoToTeam})(AddTodo);","import React from 'react';\r\n// dependencies for date pickers\r\nimport {MuiPickersUtilsProvider, DateTimePicker} from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nimport {addEventToTeam} from '../../redux/actions/eventActions';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './css/AddEvent.css';\r\n\r\nclass AddEvent extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            title: '',\r\n            description: '',\r\n            location: '',\r\n            startTime: new Date(),\r\n            endTime: new Date(),\r\n        }\r\n\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    handleStartDateChange(date){\r\n        // set the end time as an hour after the start time\r\n        const newEnd = new Date(date);\r\n        newEnd.setHours(newEnd.getHours() + 1);\r\n        this.setState({\r\n            endTime: new Date(newEnd)\r\n        })\r\n\r\n        this.setState({\r\n            startTime: new Date(+date),\r\n        })\r\n    }\r\n\r\n    handleEndDateChange(date){\r\n        this.setState({\r\n            endTime: new Date(+date),\r\n        })\r\n    }\r\n\r\n    onChange(evt){\r\n        const id = evt.target.id;\r\n        this.setState({[id]: evt.target.value});\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n        const {user} = this.props.auth;\r\n        // get team data passed in by state from team.js\r\n        const {teamData} = this.props.location.state;\r\n\r\n        if (this.state.startTime > this.state.endTime){\r\n            alert('Your start time must be earlier than your end time');\r\n            return;\r\n        }\r\n\r\n        const newEvent = {\r\n            eventTitle: this.state.title,\r\n            eventDescription: this.state.description,\r\n            eventLocation: this.state.location,\r\n            eventStartTime: this.state.startTime,\r\n            eventEndTime: this.state.endTime,\r\n            author: user.firstName + ' ' + user.lastName,\r\n        }\r\n\r\n        this.props.addEventToTeam(teamData, newEvent);\r\n        this.props.history.push(`/team/${teamData._id}`);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='add-event-container'>\r\n                <h1 className='add-event-header'>What's the event?</h1>\r\n                <form className='add-event-form'>\r\n                    <label className='input-label'>What's the name of your event?</label>\r\n                    <input className='event-input' id='title' type='text' value={this.state.title} \r\n                        onChange={this.onChange} />\r\n                    <label className='input-label'>Describe your event.</label>\r\n                    <textarea className='event-input' id='description' type='text' \r\n                        value={this.state.description} rows='5'\r\n                        onChange={this.onChange} />\r\n                    <label className='input-label'>Where will your event be?</label>\r\n                    <input className='event-input' id='location' type='text' value={this.state.location} \r\n                        onChange={this.onChange} />\r\n                    <div className='date-selectors'>\r\n                        <MuiPickersUtilsProvider\r\n                            className='date-picker'\r\n                            utils={DateFnsUtils}>\r\n                            <div className='date-chooser'>\r\n                                <DateTimePicker\r\n                                    className='date-chooser'\r\n                                    id='startTime'\r\n                                    label='Choose a start time'\r\n                                    value={this.state.startTime}\r\n                                    onChange={this.handleStartDateChange}/>\r\n                            </div>\r\n                            <div className='date-chooser'>\r\n                                <DateTimePicker\r\n                                    className='date-chooser'\r\n                                    id='endTime'\r\n                                    label='Choose an end time'\r\n                                    value={this.state.endTime}\r\n                                    onChange={this.handleEndDateChange}/>\r\n                            </div>\r\n                        </MuiPickersUtilsProvider>\r\n                    </div>\r\n                    <button onClick={this.onSubmit} className='submit-btn btn'>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    auth: state.auth,\r\n    event: state.event,\r\n})\r\n\r\nexport default connect(mapStateToProps, {addEventToTeam})(AddEvent);","import axios from 'axios';\r\nimport {ADD_EVENT_TO_TEAM, DELETE_EVENT, UPDATE_EVENT} from './types';\r\n\r\n// add a note to the notes list for a given team\r\nexport const addEventToTeam = (teamData, eventData) => dispatch => {\r\n    axios.post('/events/add', {teamData, eventData})\r\n        .then(res1 => {\r\n            console.log(res1);\r\n            // add note's objectid to team's notes\r\n            const eventId = res1.data._id;\r\n\r\n            axios.post('/teams/addevent', {teamData, eventId})\r\n                .then(res2 => {\r\n                    console.log(res2);\r\n                    \r\n                    // updates the state with the newest note added\r\n                    dispatch({\r\n                        type: ADD_EVENT_TO_TEAM,\r\n                        payload: res1.data,\r\n                    })\r\n                })\r\n                \r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\n// delete event\r\nexport const deleteEvent = (eventData, teamData) => dispatch => {\r\n    // delete event from team's event list of objid's first\r\n    axios.post('/teams/deleteevent', {eventData, teamData})\r\n        .then(res => {\r\n            console.log(res);\r\n            axios.post('/events/delete', {eventData})\r\n            .then(res => {\r\n                console.log(res);\r\n                // dispatch null payload to refresh upon deletion\r\n                dispatch({\r\n                    type: DELETE_EVENT,\r\n                    payload: null,\r\n                })\r\n            })\r\n            .catch(err => console.log(err))\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\n// updates a given event\r\nexport const updateEvent = (eventData) => dispatch => {\r\n    axios.post('/events/update', {eventData})\r\n        .then(res => {\r\n            console.log(res);\r\n            dispatch({\r\n                type: UPDATE_EVENT,\r\n                payload: eventData,\r\n            })\r\n        })\r\n        .catch(err => console.log('error!! ' + err))\r\n}","/*\r\nA route in this application that requires authentication (the component\r\nan instance of PrivateRoute represents is stored in component)\r\nIf unauth, then the user will be sent to the login screen\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nconst PrivateRoute = ({component: Component, auth, ...rest}) => (\r\n    // if the user is auth'd, then show this component and if not, show the login\r\n    <Route {...rest}\r\n        render={props => \r\n            auth.isAuthenticated ? <Component {...props} /> :\r\n                <Redirect to='/login' />} />\r\n);\r\n\r\n// puts the state from the store into the props of this component\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n})\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// for right click context menu to delete\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\nimport {getTeamWithId} from '../../redux/actions/teamActions';\r\nimport {deleteEvent} from '../../redux/actions/eventActions';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './css/EventList.css';\r\n\r\nclass EventList extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.sortEvents = this.sortEvents.bind(this);\r\n        this.sortFutureEvents = this.sortFutureEvents.bind(this);\r\n        this.onContextItemClick = this.onContextItemClick.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // get the current team and store in state\r\n        const {id} = this.props.match.params;\r\n        // get the team that the user is viewing\r\n        this.props.getTeamWithId(id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        // if any updates to last changed event, refresh to show updates\r\n        if (this.props.event.lastAddedEvent != prevProps.event.lastAddedEvent){\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /*\r\n    Given list of events, sort them from most recent to oldest\r\n    */\r\n    sortEvents(eventsList){\r\n        eventsList.sort((a, b) => {\r\n            a = new Date(a.eventStartTime);\r\n            b = new Date(b.eventStartTime);\r\n            return a > b ? -1 : a < b ? 1 : 0\r\n        })\r\n        return eventsList;\r\n    }\r\n\r\n    sortFutureEvents(eventsList){\r\n        eventsList.sort((a, b) => {\r\n            a = new Date(a.eventStartTime);\r\n            b = new Date(b.eventStartTime);\r\n            return a < b ? -1 : a > b ? 1 : 0\r\n        })\r\n        return eventsList;\r\n    }\r\n    \r\n    onContextItemClick(evt, data){\r\n        evt.preventDefault();\r\n        const {eventData} = data;\r\n        const {currTeam} = this.props.team;\r\n        this.props.deleteEvent(eventData, currTeam);\r\n        // reload page to show deletions\r\n        window.location.reload();\r\n    }\r\n\r\n    render(){\r\n        const {currTeam} = this.props.team;\r\n\r\n        const eventsList = currTeam.teamEvents;\r\n        // sort events by date\r\n        const sortedEvents = eventsList ? this.sortEvents(eventsList) : eventsList;\r\n        const sortedFutureEvents = eventsList ? this.sortFutureEvents(eventsList) : eventsList;\r\n        let numPast = 0;\r\n        let numFuture = 0;\r\n        // make component for past events\r\n        let pastEventsCompon = sortedEvents && sortedEvents.length > 0 ?\r\n            sortedEvents.map(event => {\r\n                const start = new Date(event.eventStartTime);\r\n                const end = new Date(event.eventEndTime);\r\n                const currTime = new Date();\r\n\r\n                if (currTime > start){\r\n                    numPast++;\r\n                    return(\r\n                        <div key={event._id}>\r\n                            <ContextMenuTrigger id={event._id}>\r\n                                <Link className='link-to-edit'\r\n                                    to={{pathname:'/editevent', state:{event}}}>\r\n                                    <Card className='event-card'>\r\n                                        <h4 className='event-title color-blue'>{event.eventTitle}</h4>\r\n                                        <p>{event.eventDescription.slice(0, 100)}</p>\r\n                                        <div className='event-details'>\r\n                                            <Grid container spacing={2}>\r\n                                                <Grid item xs={2}>\r\n                                                    <LocationOnIcon className='location-icon color-blue'/>\r\n                                                </Grid>\r\n                                                <Grid item xs={10}>\r\n                                                    <p>{event.eventLocation}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <p>Start: {start.toLocaleString()}</p>\r\n                                            <p>End: {end.toLocaleString()}</p>\r\n                                        </div>\r\n                                    </Card>\r\n                                </Link>\r\n                            </ContextMenuTrigger>\r\n                            <ContextMenu id={event._id} className='context-menu-container'>\r\n                                <MenuItem className='context-menu-item' data={{eventData: event}} \r\n                                    onClick={this.onContextItemClick}>\r\n                                    Delete\r\n                                </MenuItem>\r\n                            </ContextMenu>\r\n                        </div>\r\n                    )\r\n                }\r\n            })\r\n        : null;\r\n\r\n        if (numPast === 0){\r\n            pastEventsCompon = <p className='no-event-text'>No past events to show!</p>\r\n        }\r\n\r\n        // make component for future events\r\n        let futureEventsCompon = sortedFutureEvents && sortedFutureEvents.length > 0 ?\r\n            sortedFutureEvents.map(event => {\r\n                const start = new Date(event.eventStartTime);\r\n                const end = new Date(event.eventEndTime);\r\n                // don't show events that have already passed\r\n                const currTime = new Date();\r\n\r\n                if (currTime <= start){\r\n                    numFuture++;\r\n                    return(\r\n                        <div key={event._id}>\r\n                            <ContextMenuTrigger id={event._id}>\r\n                                <Link className='link-to-edit'\r\n                                    to={{pathname:'/editevent', state:{event}}}>\r\n                                    <Card className='event-card'>\r\n                                        <h4 className='event-title color-blue'>{event.eventTitle}</h4>\r\n                                        <p>{event.eventDescription.slice(0, 100)}</p>\r\n                                        <div className='event-details'>\r\n                                            <Grid container spacing={2}>\r\n                                                <Grid item xs={2}>\r\n                                                    <LocationOnIcon className='location-icon color-blue'/>\r\n                                                </Grid>\r\n                                                <Grid item xs={10}>\r\n                                                    <p>{event.eventLocation}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <p>Start: {start.toLocaleString()}</p>\r\n                                            <p>End: {end.toLocaleString()}</p>\r\n                                        </div>\r\n                                    </Card>\r\n                                </Link>\r\n                            </ContextMenuTrigger>\r\n                            <ContextMenu id={event._id} className='context-menu-container'>\r\n                                <MenuItem className='context-menu-item' data={{eventData: event}} \r\n                                    onClick={this.onContextItemClick}>\r\n                                    Delete\r\n                                </MenuItem>\r\n                            </ContextMenu>\r\n                        </div>\r\n                    )\r\n                }\r\n            })\r\n        : <p>No upcoming events!</p>;\r\n\r\n        if (numFuture === 0){\r\n            futureEventsCompon = <p className='no-event-text'>No upcoming events!</p>\r\n        }\r\n\r\n        return(\r\n            <div className='event-list-container'>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={1}>\r\n                        <ArrowBackIosIcon fontSize='large' className='back-btn' \r\n                            onClick={() => this.props.history.goBack()} />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <h1 className='event-list-header'>Events for {currTeam.teamName}</h1>\r\n                    </Grid>\r\n                </Grid>\r\n                <h1 className='event-list-title'>Upcoming Events</h1>\r\n                <div className='all-events-container'>\r\n                    {futureEventsCompon}\r\n                </div>\r\n                <h1 className='event-list-title'>Past Events</h1>\r\n                <div className='all-events-container'>\r\n                    {pastEventsCompon}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    team: state.team,\r\n    event: state.event,\r\n})\r\n\r\nexport default connect(mapStateToProps, {getTeamWithId, deleteEvent})(EventList);","import React from 'react';\r\n// dependencies for date pickers\r\nimport {MuiPickersUtilsProvider, DateTimePicker} from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nimport {updateEvent} from '../../redux/actions/eventActions';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './css/AddEvent.css';\r\n\r\nclass EditEvent extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            title: '',\r\n            description: '',\r\n            location: '',\r\n            startTime: new Date(),\r\n            endTime: new Date(),\r\n        }\r\n\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // get the info from the event that was clicked on\r\n        const {event} = this.props.location.state;\r\n        console.log(event);\r\n        if (event){\r\n            this.setState({\r\n                title: event.eventTitle,\r\n                description: event.eventDescription,\r\n                location: event.eventLocation,\r\n                startTime: new Date(event.eventStartTime),\r\n                endTime: new Date(event.eventEndTime),\r\n            })\r\n        }\r\n    }\r\n\r\n    handleStartDateChange(date){\r\n        // set the end time as an hour after the start time\r\n        const newEnd = new Date(date);\r\n        newEnd.setHours(newEnd.getHours() + 1);\r\n        this.setState({\r\n            endTime: new Date(newEnd)\r\n        })\r\n\r\n        this.setState({\r\n            startTime: new Date(+date),\r\n        })\r\n    }\r\n\r\n    handleEndDateChange(date){\r\n        this.setState({\r\n            endTime: new Date(+date),\r\n        })\r\n    }\r\n\r\n    onChange(evt){\r\n        const id = evt.target.id;\r\n        this.setState({[id]: evt.target.value});\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n        const {user} = this.props.auth;\r\n        // get team data passed in by state from team.js\r\n        const {teamData} = this.props.location.state;\r\n\r\n        if (this.state.startTime > this.state.endTime){\r\n            alert('Your start time must be earlier than your end time');\r\n            return;\r\n        }\r\n\r\n        const eventToUpdate = {\r\n            eventId: this.props.location.state.event._id,\r\n            eventTitle: this.state.title,\r\n            eventDescription: this.state.description,\r\n            eventLocation: this.state.location,\r\n            eventStartTime: this.state.startTime,\r\n            eventEndTime: this.state.endTime,\r\n            author: user.firstName + ' ' + user.lastName,\r\n        }\r\n\r\n        this.props.updateEvent(eventToUpdate);\r\n        //this.props.history.push(`/team/${teamData._id}`);\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='add-event-container'>\r\n                <h1 className='add-event-header'>What would you like to change?</h1>\r\n                <form className='add-event-form'>\r\n                    <label className='input-label'>What's the name of your event?</label>\r\n                    <input className='event-input' id='title' type='text' value={this.state.title} \r\n                        onChange={this.onChange} />\r\n                    <label className='input-label'>Describe your event.</label>\r\n                    <textarea className='event-input' id='description' type='text' \r\n                        value={this.state.description} rows='5'\r\n                        onChange={this.onChange} />\r\n                    <label className='input-label'>Where will your event be?</label>\r\n                    <input className='event-input' id='location' type='text' value={this.state.location} \r\n                        onChange={this.onChange} />\r\n                    <div className='date-selectors'>\r\n                        <MuiPickersUtilsProvider\r\n                            className='date-picker'\r\n                            utils={DateFnsUtils}>\r\n                            <div className='date-chooser'>\r\n                                <DateTimePicker\r\n                                    className='date-chooser'\r\n                                    id='startTime'\r\n                                    label='Choose a start time'\r\n                                    value={this.state.startTime}\r\n                                    onChange={this.handleStartDateChange}/>\r\n                            </div>\r\n                            <div className='date-chooser'>\r\n                                <DateTimePicker\r\n                                    className='date-chooser'\r\n                                    id='endTime'\r\n                                    label='Choose an end time'\r\n                                    value={this.state.endTime}\r\n                                    onChange={this.handleEndDateChange}/>\r\n                            </div>\r\n                        </MuiPickersUtilsProvider>\r\n                    </div>\r\n                    <button onClick={this.onSubmit} className='submit-btn btn'>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    auth: state.auth,\r\n    event: state.event,\r\n})\r\n\r\nexport default connect(mapStateToProps, {updateEvent})(EditEvent);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {updateTeamTodo} from '../../redux/actions/teamActions';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport AddTag from \"../tags/AddTag\";\r\n\r\nimport './css/EditTodo.css';\r\n\r\nclass EditTodo extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todoText: '',\r\n            assignee: '',\r\n            tags: [],\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmitTodo = this.onSubmitTodo.bind(this);\r\n    }\r\n\r\n    deleteTag = evt => {\r\n        // find tag with the id in list of tags\r\n        const {id} = evt.target;\r\n\r\n        this.setState(prevState => {\r\n            const {tags} = prevState;\r\n\r\n            for (let i = 0; i < tags.length; i++){\r\n                // remove the tag\r\n                if (tags[i]._id === id){\r\n                    console.log(tags[i])\r\n                    tags.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            return {tags};\r\n        });\r\n    }\r\n\r\n    addTag = evt => {\r\n        evt.preventDefault();\r\n        // get the tag then put into array of tags\r\n        const tag = document.getElementById(\"select-tag\").value;        \r\n\r\n        // check if tag is already added and make sure no more than 3 tags are added\r\n        const {tags} = this.state;\r\n        if (tags.length >= 3){\r\n            alert(\"You can only add up to 3 tags\");\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < tags.length; i++){\r\n            if (tags[i].title === tag){\r\n                alert(\"You already added this tag\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        // get current team\r\n        const currTeam = this.props.location.state.teamData;\r\n        const {teamTags} = currTeam;\r\n        let selTag = {}\r\n        for (let i = 0; i < teamTags.length; i++){\r\n            if (teamTags[i].title === tag){\r\n                selTag = teamTags[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.setState(prevState => {\r\n             // add newly typed tag to tag list\r\n             const tags = prevState.tags.concat(selTag);\r\n             return {tags}\r\n        })\r\n    }\r\n\r\n\r\n    onChange(evt){\r\n        this.setState({todoText: evt.target.value});\r\n    }\r\n\r\n    componentDidMount(){\r\n        // set state for the passed in props\r\n        const {currTodo} = this.props.location.state;\r\n        this.setState({\r\n            todoText: currTodo.todoText,\r\n            assignee: currTodo.assignee,\r\n            tags: currTodo.tags,\r\n        })\r\n    }\r\n\r\n    onSubmitTodo(evt){\r\n        evt.preventDefault();\r\n\r\n        const {teamData} = this.props.location.state;\r\n        const {user} = this.props.auth;\r\n        const {currTodo} = this.props.location.state;\r\n\r\n        const todoData = {\r\n            todoText: this.state.todoText,\r\n            assignee: this.state.assignee,\r\n            id: currTodo._id,\r\n            tags: this.state.tags,\r\n            author: user.firstName + ' ' + user.lastName,\r\n        }\r\n\r\n        console.log(todoData);\r\n\r\n        // add todo to team and redirect back to the team home\r\n        this.props.updateTeamTodo(teamData, todoData);\r\n        //this.props.history.push(`/team/${teamData._id}`);\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    render(){\r\n        // get current team\r\n        const {teamData} = this.props.location.state;\r\n        const {tags} = this.state;\r\n        const membersList = teamData.teamMembers;\r\n\r\n        // dropdown of all members in curr team to choose an assignee\r\n        const memberDropdownItems = membersList && membersList.length > 0 ?\r\n            membersList.map(member => \r\n                <Dropdown.Item key={member._id}\r\n                    onClick={() => this.setState({assignee: `${member.user.firstName} ${member.user.lastName}`})}>\r\n                    {member.user.firstName + ' ' + member.user.lastName}\r\n                </Dropdown.Item> \r\n            ) : null;\r\n\r\n        return(\r\n            <div className='edit-todo-container'>\r\n                <h1 className='edit-todo-title'>What do you want to change?</h1>\r\n                <form className='edit-todo-form'>\r\n                    <input className='todo-input' name='todoText' type='text' \r\n                        onChange={this.onChange} value={this.state.todoText} />\r\n\r\n                    <Dropdown className='assign-dropdown'>\r\n                        <Dropdown.Toggle id='team-selector'>\r\n                            {\r\n                                // decide if the user is on a team or if the user hasn't selected a team yet\r\n                                this.state.assignee.length > 0 ? this.state.assignee : \"None\"\r\n                            }\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item onClick={() => this.setState({assignee: ''})}>\r\n                                None\r\n                            </Dropdown.Item>\r\n                            {memberDropdownItems}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <AddTag tags={tags} addTag={this.addTag} deleteTag={this.deleteTag} currTeam={teamData}/>\r\n\r\n                </form>\r\n                <button className='submit-btn btn' onClick={this.onSubmitTodo}>Submit</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    team: state.team,\r\n})\r\n\r\nexport default connect(mapStateToProps, {updateTeamTodo})(EditTodo);","import React from 'react';\r\nimport './css/Message.css';\r\nimport {Link, withRouter} from 'react-router-dom';\r\n\r\n// for right click context menu to delete\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\nconst onContextItemClick = (evt, data) => {\r\n    console.log(data);\r\n    // convert text to note\r\n    if (data.type === 'note'){\r\n        // push the user to add note page with msg data\r\n        const currNote = {\r\n            noteTitle: '',\r\n            noteBody: data.msgData.text,\r\n        }\r\n\r\n        data.history.push({\r\n            pathname:`/noteslist/${data.teamData._id}`,\r\n            state:{\r\n                currNote,\r\n                teamData: data.teamData,\r\n                fromChat: true,\r\n            }\r\n        })\r\n    }\r\n    // convert text to todo\r\n    else if (data.type === 'todo'){\r\n        data.history.push({\r\n            pathname:'/addtodo',\r\n            state:{\r\n                todoText: data.msgData.text,\r\n                teamData: data.teamData,\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst Message = (props) => {\r\n    let isSentByCurrUser = false;\r\n    const trimmedName = props.userName.trim().toLowerCase();\r\n    if (props.msg.user === trimmedName) isSentByCurrUser = true;\r\n\r\n    const message = isSentByCurrUser ? \r\n        <div className='msgContainer justifyEnd'>\r\n            <div className='msgBox currUser'>\r\n                <p className='msgText'>{props.msg.text}</p>\r\n            </div>\r\n        </div> :\r\n        <div className='msgContainer justifyStart notMe'>\r\n            <p>{props.msg.user}</p>\r\n            <div className='msgBox notCurrUser'>\r\n                <p className='msgText'>{props.msg.text}</p>\r\n            </div>\r\n        </div>;\r\n\r\n    return(\r\n        <div key={props.msg._id}>\r\n            <ContextMenuTrigger id={props.msg._id}>\r\n                {message}\r\n            </ContextMenuTrigger>\r\n\r\n            <ContextMenu id={props.msg._id} className='context-menu-container'>\r\n                <MenuItem className='context-menu-item' id='note'\r\n                    data={{msgData: props.msg, teamData: props.team, history: props.history, type:'note'}} \r\n                    onClick={onContextItemClick}>\r\n                    Turn to note\r\n                </MenuItem>\r\n                <MenuItem className='context-menu-item' id='todo'\r\n                    data={{msgData: props.msg, teamData: props.team, history: props.history, type:'todo'}} \r\n                    onClick={onContextItemClick}>\r\n                    Turn to todo\r\n                </MenuItem>\r\n            </ContextMenu>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Message);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Message from './Message';\r\n\r\n// socket stuff\r\nimport io from 'socket.io-client';\r\n\r\nclass Messages extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            msgs: [],\r\n            currTeam: {},\r\n        }\r\n        this.onScroll = this.onScroll.bind(this);\r\n        this.ENDPOINT = 'localhost:5000';\r\n        this.socket = io('localhost:5000');\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n        if (nextProps.msgs !== prevState.msgs){\r\n            return {msgs: nextProps.msgs, currTeam: nextProps.team}\r\n        }\r\n        else return null;\r\n    }\r\n\r\n    /*\r\n    lifecycle method called before an update to check for the user's position in\r\n    the chat. if the user has scrolled high enough, don't bring user down to \r\n    bottom when there's a new message\r\n    */\r\n    getSnapshotBeforeUpdate(){\r\n        const node = ReactDOM.findDOMNode(this);\r\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight >= node.scrollHeight;\r\n        return null;\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        // when there's a new message, bring user to the bottom of the chat\r\n        if (this.shouldScrollToBottom){\r\n            const node = ReactDOM.findDOMNode(this);\r\n            node.scrollTop = node.scrollHeight;\r\n        }\r\n    }\r\n\r\n    onScroll = () => {\r\n        //get the ref 'containerRef' from this\r\n        const {refs} = this;\r\n        const scrollTop = refs.containerRef.scrollTop;\r\n\r\n        // reached the top of the messages, so get more messages\r\n        if (scrollTop === 0){\r\n            console.log('load more messages')\r\n            \r\n            this.socket.emit('loadMoreMsgs', this.state.currTeam, (newMsgs) => {\r\n                if (newMsgs){\r\n                    this.setState((prevState, props) => ({msgs: newMsgs.concat(prevState.msgs)}))\r\n                    /* PROBLEM: WON'T SET STATE TO COMBINED OLD + NEW 5 MESSAGES */\r\n                }\r\n            });    \r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {userName, team} = this.props;\r\n        return(\r\n            <div ref='containerRef' id='msgsContainer' onScroll={this.onScroll} style={{height:'70vh', overflow:'auto'}} >\r\n                { \r\n                    this.state.msgs ? this.state.msgs.map((msg, i) =>\r\n                        <div key={i}>\r\n                            <Message msg={msg} userName={userName} team={team}/>\r\n                        </div> \r\n                    ) : null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Messages;","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {addTag} from '../../redux/actions/tagActions';\r\nimport {getTeamWithId} from \"../../redux/actions/teamActions\";\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\nimport './css/Tags.css';\r\n\r\nclass Tags extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            tags: [],\r\n            tag: '',\r\n            tagDesc: '',\r\n            // list of colors that will be chosen randomly\r\n            tagColors: ['#eea990', '#f6e0b5', '#aa6f73', '#0D97AC', '#588C73', '#F2AE72', '#8C4646', '#53BBF4', '#92B06A', '#E19D29']\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // get the id of the team and call the action to get the specific team\r\n       // const {id} = this.props.match.params;\r\n        const id = this.props.location.state.currTeam._id;\r\n        console.log(id);\r\n        // get the team that the user is viewing and put it into this.props.team\r\n        this.props.getTeamWithId(id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        console.log(this.props.tags, prevProps.tags);\r\n        // if added a note, then should refresh to show new note\r\n        if (this.props.tags.tags != prevProps.tags.tags){\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    addTagClick = evt => {\r\n        evt.preventDefault();\r\n        const tagData = {\r\n            title: this.state.tag, \r\n            description: this.state.tagDesc,\r\n            color: this.state.tagColors[Math.floor(Math.random() * this.state.tagColors.length)],\r\n        };\r\n\r\n        // clear new tag textbox for if user wants to enter new tag\r\n        this.setState(state => {\r\n            // add newly typed tag to tag list\r\n            const tags = state.tags.concat({title: state.tag, description: state.tagDesc});\r\n            return {tags, tag:'', tagDesc:''}\r\n        });\r\n\r\n        const teamId = this.props.location.state.currTeam._id;\r\n        console.log(tagData);\r\n        // add new tag to the db\r\n        this.props.addTag(teamId, tagData);\r\n    }\r\n\r\n    onChange = evt => {\r\n        this.setState({[evt.target.id] : evt.target.value});\r\n    }\r\n\r\n    render(){\r\n        // get the current team that was passed in\r\n        //const {currTeam} = this.props.location.state;\r\n        const {currTeam} = this.props.team;\r\n        const tags = currTeam.teamTags;\r\n        return(\r\n            <div className=\"tag-page-container\">\r\n                <div className=\"tag-header-container\">\r\n                    <ArrowBackIosIcon fontSize='large' className='back-btn' \r\n                                onClick={() => this.props.history.push(`/team/${currTeam._id}`)} />\r\n                    <h1 className=\"tag-header\">Tags</h1>\r\n                </div>\r\n                <div className=\"tag-list\">\r\n                {\r\n                    tags && tags.length > 0 ? tags.map(tag =>\r\n                        <div className=\"tagContainer\" style={{backgroundColor: tag.color}}>\r\n                            <p key={tag.title}>{tag.title}</p>   \r\n                        </div> \r\n                    ) : <p>No tags yet!</p>\r\n                }\r\n                </div>\r\n                <div className=\"tag-input-container\">\r\n                    <label className=\"input-label\">What tag do you want to create?</label>\r\n                    <input type=\"text\" className=\"tag-input\" id=\"tag\" value={this.state.tag} onChange={this.onChange}/>\r\n                    <label className=\"input-label\">Describe your tag.</label>\r\n                    <input type=\"text\" className=\"tag-input\" id=\"tagDesc\" value={this.state.tagDesc} onChange={this.onChange} />\r\n                    <button className=\"btn add-tag-btn\" onClick={this.addTagClick}>Add Tag</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    team: state.team,\r\n    tags: state.tags\r\n})\r\n\r\nexport default connect(mapStateToProps, {addTag, getTeamWithId})(Tags);","import axios from 'axios';\r\nimport {ADD_TAG} from './types';\r\n\r\n// add a note to the notes list for a given team\r\nexport const addTag = (teamId, tagData) => dispatch => {\r\n    console.log(tagData);\r\n    axios.post('/tags/add', {tagData})\r\n        .then(res1 => {\r\n            console.log(res1);\r\n            // res1.data holds the entire new tag object (_id, title, description)\r\n            const tagId = res1.data._id;\r\n            // need to add tag to the current team too\r\n            axios.post(`/teams/${teamId}/tags/add`, {tagId})\r\n                .then(res2 => {\r\n                    console.log(res2);\r\n                    dispatch({\r\n                        type: ADD_TAG,\r\n                        payload: tagData,\r\n                    })\r\n                })\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\n// check if a tag is already in a team\r\nexport const checkTagUnique = (teamId, tagData) => dispatch => {\r\n    axios.post(`/teams/${teamId}/tags/checkUnique`, {tagData})\r\n        .then(res => {\r\n            console.log(res);\r\n        })\r\n}","/*\r\nChanges the state variables that deal with authentication depending on\r\nwhich type of action was dispatched\r\n*/\r\n\r\nimport {SET_CURRENT_USER, USER_LOADING} from '../actions/types';\r\n\r\nconst initState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false,\r\n}\r\n\r\nexport default function(state = initState, action){\r\n    // find which action occurred to decide how to change the state\r\n    switch(action.type){\r\n        case SET_CURRENT_USER:\r\n            return{\r\n                ...state,\r\n                isAuthenticated: action.payload,\r\n                user: action.payload,\r\n            }\r\n        case USER_LOADING:\r\n            return{\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","/*\r\nChanges the state variables that deal with error handling depending on\r\nwhich type of action was dispatched\r\n*/\r\n\r\nimport {GET_ERRORS} from '../actions/types';\r\n\r\nconst initState = {err: ''};\r\n\r\nexport default (state = initState, action) => {\r\n    switch(action.type){\r\n        case GET_ERRORS:\r\n            return {err: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}","import { JOIN_TEAM, GET_TEAMS_WITH_PROMPT, GET_TEAM_WITH_ID, GET_ALL_TEAMS, ADD_NOTE_TO_TEAM, \r\n            ADD_TODO_TO_TEAM, COMPLETE_TODO, ADD_EVENT_TO_TEAM, DELETE_TODO, EDIT_TODO, GET_CHAT_HISTORY, EDIT_TEAM} from \"../actions/types\";\r\n\r\n/*\r\nChanges the state variables that deal with teams depending on which \r\naction is dispatched, including joining teams\r\n*/\r\n\r\n/*\r\nteams: list of all teams, \r\nmatchedTeams: list of teams for TeamSearch.js\r\nteam: specific team for Team.js\r\n*/\r\nconst initState = {\r\n    teamsList: [],\r\n    matchedTeams: [],\r\n    currTeam: {},\r\n    lastAddedTodo: {},\r\n    messagesList: [],\r\n}\r\nexport default function(state = initState, action){\r\n    // find which action occurred to decide how to change the state\r\n    switch(action.type){\r\n        case JOIN_TEAM:\r\n            // after action, teams have been updated with new members, so update teams var\r\n            return state;\r\n        case GET_TEAMS_WITH_PROMPT:\r\n            // return the updated state, with the newly matched teams to the user's prompt\r\n            return {\r\n                ...state,\r\n                matchedTeams: action.payload,\r\n            }\r\n        case GET_TEAM_WITH_ID:\r\n            // set the state currTeam to the team that the user is viewing\r\n            return {\r\n                ...state,\r\n                currTeam: action.payload,\r\n            };\r\n        case GET_ALL_TEAMS:\r\n            // set state of teams with list of all teams\r\n            return {\r\n                ...state,\r\n                teamsList: action.payload,\r\n            }\r\n        case EDIT_TEAM:\r\n            // set state of teams with list of all teams\r\n            return {\r\n                ...state,\r\n                currTeam: action.payload,\r\n            }\r\n        case ADD_TODO_TO_TEAM:\r\n            // set the state of last added todo (for page refresh)\r\n            return {\r\n                ...state,\r\n                lastAddedTodo: action.payload,\r\n            }\r\n        case COMPLETE_TODO:\r\n            // update state with the newly completed todo\r\n            return {\r\n                ...state,\r\n                lastAddedTodo: action.payload,\r\n            }\r\n        case DELETE_TODO:\r\n            return {\r\n                ...state,\r\n                lastAddedTodo: action.payload,\r\n            }\r\n        case EDIT_TODO:\r\n            return {\r\n                ...state,\r\n                lastAddedTodo: action.payload,\r\n            }\r\n        case GET_CHAT_HISTORY:\r\n            return {\r\n                ...state,\r\n                messagesList: action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {ADD_NOTE_TO_TEAM, DELETE_NOTE} from '../actions/types';\r\n\r\nconst initState = {\r\n    lastAddedNote: {},\r\n}\r\n\r\nexport default function(state = initState, action){\r\n    // find which action occurred to decide how to change the state\r\n    switch(action.type){\r\n        case ADD_NOTE_TO_TEAM:\r\n            return {\r\n                lastAddedNote: action.payload,\r\n            };\r\n        case DELETE_NOTE:\r\n            return {\r\n                lastAddedNote: action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {ADD_EVENT_TO_TEAM, DELETE_EVENT, UPDATE_EVENT} from '../actions/types';\r\n\r\nconst initState = {\r\n    lastAddedEvent: {},\r\n}\r\n\r\nexport default function(state = initState, action){\r\n    // find which action occurred to decide how to change the state\r\n    switch(action.type){\r\n        case ADD_EVENT_TO_TEAM:\r\n            return {\r\n                lastAddedEvent: action.payload,\r\n            };\r\n        case DELETE_EVENT:\r\n            return {\r\n                lastAddedEvent: action.payload,\r\n            }\r\n        case UPDATE_EVENT:\r\n            return {\r\n                lastAddedEvent: action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {ADD_TAG} from '../actions/types';\r\n\r\nconst initState = {\r\n    tags: [],\r\n}\r\n\r\nexport default function(state = initState, action){\r\n    switch(action.type){\r\n        case ADD_TAG:\r\n            state.tags.push(action.payload)\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}","/*\r\nWill be the root reducer that combines authReducer, errorReducer\r\nbecause a store can only be initialized with a single reducer\r\n*/\r\n\r\nimport {combineReducers} from 'redux';\r\nimport authReducer from './authReducers';\r\nimport errorReducer from './errorReducers';\r\nimport teamReducer from './teamReducer';\r\nimport noteReducer from './noteReducer';\r\nimport eventReducer from './eventReducer';\r\nimport tagReducer from './tagReducers';\r\n\r\n/*\r\nCreates root reducer with all of the reducers inside\r\nCan access the state inside of a reducer in the frontend\r\nby using mapStateToProps and doing tags: state.tags\r\n*/\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    error: errorReducer,\r\n    team: teamReducer,\r\n    note: noteReducer,\r\n    event: eventReducer,\r\n    tags: tagReducer,\r\n});","/*\r\nThe redux store that will hold the state of this application\r\n*/\r\n\r\nimport {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initState = {};\r\n\r\n// list of middleware, only using thunk\r\nconst middlware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initState,\r\n    compose(applyMiddleware(... middlware))\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Home from './components/home/Home';\nimport NotesList from './components/notes/NotesList';\nimport AllNotes from \"./components/notes/AllNotes\";\nimport TagNoteList from \"./components/notes/TagNoteList\";\nimport Note from './components/notes/NoteView';\nimport Login from './components/auth/Login';\nimport Register from './components/auth/Register';\nimport CreateTeam from './components/teams/CreateTeam';\nimport TeamSearch from './components/teams/TeamSearch';\nimport EditTeam from './components/teams/EditTeam';\nimport Team from './components/teams/Team';\nimport AddTodo from './components/todos/AddTodo';\nimport AddEvent from './components/events/AddEvent';\nimport PrivateRoute from './components/private-route/PrivateRoute';\nimport EventList from './components/events/EventList';\nimport EditEvent from './components/events/EditEvent';\nimport EditTodo from './components/todos/EditTodo';\nimport Messages from './components/chat/Messages';\nimport Chat from './components/chat/Chat';\nimport Message from './components/chat/Message';\nimport Tags from './components/tags/Tags';\n\n// use the follow in order to track if user is logged in still after reloads\nimport jwt_decode from 'jwt-decode';\nimport setAuthToken from './utils/setAuthToken';\nimport {setCurrentUser, logoutUser} from './redux/actions/authActions';\n\n// redux stuff\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\n\n// check for token to keep user logged in\nif (localStorage.jwtToken){\n  // set auth token header since the user is logged in already\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // decode token to get user info and exp (expiration time)\n  const decodedToken = jwt_decode(token);\n  // set isAuth for user to be authenticated\n  store.dispatch(setCurrentUser(decodedToken));\n\n  // log out the user if the token has expired\n  const currentTime = Date.now() / 1000;\n  if (decodedToken.exp < currentTime){\n    store.dispatch(logoutUser());\n    // redirect to login after log the user out\n    window.location.href = './login';\n  }\n}\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <PrivateRoute exact path=\"/\" component = {Home} />\n        <PrivateRoute exact path=\"/noteslist/:id\" component = {NotesList} />\n        <PrivateRoute exact path=\"/team/:id\" component = {Team} />\n        <PrivateRoute path=\"/editteam\" component={EditTeam} />\n        <PrivateRoute path=\"/teamsearch\" component = {TeamSearch} />\n\n        <PrivateRoute exact path=\"/team/:teamid/notes/tag/:tagid/:noteid\" component = {Note} />\n        <PrivateRoute exact path=\"/team/:teamid/notes/:noteid\" component = {Note} />\n        <PrivateRoute exact path=\"/team/:teamid/notes/tag/:tagid\" component={TagNoteList} />\n        <PrivateRoute exact path=\"/team/:teamid/notes\" component={AllNotes} />\n\n        <PrivateRoute path=\"/eventslist/:id\" component = {EventList} />\n        <Route exact path=\"/login\" component = {Login} />\n        <Route exact path=\"/register\" component = {Register} />\n        <PrivateRoute path=\"/edittodo\" component = {EditTodo} />\n        <PrivateRoute path=\"/addtodo\" component = {AddTodo} />\n        <PrivateRoute path=\"/addevent\" component = {AddEvent} />\n        <PrivateRoute path='/chat' component={Chat} />\n        <PrivateRoute path='/messages' component={Messages} />\n        <PrivateRoute path='/message' component={Message} />\n        <PrivateRoute path='/editevent' component={EditEvent} />\n        <PrivateRoute exact path=\"/createTeam\" component = {CreateTeam} />\n        <PrivateRoute path=\"/tags\" component={Tags} />\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}